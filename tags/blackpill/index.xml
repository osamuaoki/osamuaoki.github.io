<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>blackpill on Goofing Osamu</title>
    <link>/tags/blackpill/</link>
    <description>Recent content in blackpill on Goofing Osamu</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 01 Sep 2022 00:00:00 +0000</lastBuildDate><atom:link href="/tags/blackpill/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>STM32F411CE (4)</title>
      <link>/jp/2022/09/01/blackpill-4/</link>
      <pubDate>Thu, 01 Sep 2022 00:00:00 +0000</pubDate>
      
      <guid>/jp/2022/09/01/blackpill-4/</guid>
      <description>cgg56の反省と改造 ARM系のMCU使用の練習にSTM32F411CE (1)で 作ったcgg56は結局 JoyStick は動きましたが、それほど操作性はよく ありませんでした。
横に押すと、横にキーボード自体が動いてしまうという問題を抱えていました。
そこでスプリットキーボードを試したかったので、ノコギリで２つに切り ポインティング部品無しで構成する改造をすることにしました。
ポインティングデバイスを除いたスペースには、キースイッチを追加します。
切り離して短くなったMCUボード無しの側は、ホームセンターで5mm角の アクリル棒で追加購入しセメダインで接着延長して対象に仕上げ、追加 のMCUボードを取り付けました。左右接続は、余っていたUSB用のケーブルを 両端切りコネクター無しで直結して対応します。できた物はcgs58と名付けます。
PIN接続 (cgs58) canterを参考にピン配置を決めました。
ところで、(R0, C0)はキーボードをキー面上から見て左上です。
以下の図もキーボードをキー面上から見て(TOP VIEW)ですので、実際の配線では 左右が逆になります。
C6xとC7xは、C6とC7の内側のMCUボード横の穴にいれたキー向けの追加のカラムです。
LTは左手側、RTは右手側です。
Blackpill (TOP VIEW) LT RT RT LT USB-C +---+-----+---+ R0 R0 ------- B12 |* | | *|5V ----- R1 R1 ------- B13 |* | | *|GND ----- R2 R2 ------- B14 |* | | *|3V3 R3 R3 ------- B15 |* +-----+ *|B10 P/D 66K-ohm (hand) C0 ------- A8 |* B N @|B2 ------ *** BOOST1 [USB] ------- A9 |* O R @|B1 ------ XX [USB] ------- A10 |* O S @|B0 ------ XX [USB] ------- A11 |* T T *|A7 ------ [USB] ------- A12 |* 0 *|A6 ------ C7x C3 ------- A15 |* *|A5 ------ C11 C2 ------- B3 |* *|A4 ------ C10 C5 ------- B4 |* *|A3 ------ C7 C6 ------- B5 |* *|A2 ------ C8 TX==\ /=TX ------- B6 |* *|A1 ------ C9 RX==/ \=RX ------- B7 |* *|A0 ------ *** USR C1 ------- B8 |* K *|R ------ *** NRST (/RST, ~RST) C4 ------- B9 |* E *|C15 ----- C12 **==5V==** ------- 5V |* Y *|C14 ----- C13 C6x **==GND=** ------- GND |* *|C13 ------*** BLUE LED 3V3 |* @ @ @ @ *|VB +-------------+ ^ ^ ^ ^ | | | | 3V3 ---------------+ | | | SWDIO -----------PA13--+ | | SWSCK -----------PA14----+ | GND ---------------------+ 左右別々に配線確認 実際には、連結以外の配線をして、qmkを書き込み配線確認をします。</description>
    </item>
    
    <item>
      <title>STM32F411CE (3)</title>
      <link>/jp/2022/03/06/blackpill-3/</link>
      <pubDate>Sun, 06 Mar 2022 00:00:00 +0000</pubDate>
      
      <guid>/jp/2022/03/06/blackpill-3/</guid>
      <description>dfu-utilは、最近、Debianででも最新の 0.11-1 が使えるようになりました。dfu-suffix等もちゃんとmanpageが付いてます。
プログラムの導入はDFUでできるめどが立ったのですが、DFUベースで動くシステムもう少しで遊んでみます。（STLINKは興味はあるけど後回しにします。）
DFUのこつ 「DFUに入りにくい」などと言うことをNETで散見します。（チップを温めるなどという「おまじない」も日本語のどこかで見ました。）
確かに、無頓着にBOOT0とNRSTのPUSHスイッチを同時押し・同時離しでDFUに入ろうとすると上手くいかないことがありました。
でも、以下の手順をとれば、確実にDFUに入れます。
まず、BOOT0を押す(1sこの状態を保つ) 併せて、NRSTも押す(1sこの状態を保つ) NRSTを離す(この時もBOOT0は押したまま) 3ステップの1s後、BOOT0を離す DFUデバイスのrealtimeの確認は、今風にjournalctl -fコマンドです。(昔はsudo dmsg -w)。
繋がったDFUデバイスの詳細状況は、dfu-util -lで確認します。
電源投入後すぐだと、一度以下のようなエラーでDFUに入れないことがありました。
usb 4-2: new full-speed USB device number 4 using xhci_hcd usb 4-2: device descriptor read/64, error -71 usb 4-2: device descriptor read/64, error -71 usb 4-2: new full-speed USB device number 5 using xhci_hcd usb 4-2: device descriptor read/64, error -71 usb 4-2: device descriptor read/64, error -71 usb usb4-port2: attempt power cycle usb 4-2: new full-speed USB device number 6 using xhci_hcd usb 4-2: Device not responding to setup address.</description>
    </item>
    
    <item>
      <title>STM32F411CE (2)</title>
      <link>/jp/2022/02/22/blackpill-2/</link>
      <pubDate>Tue, 22 Feb 2022 00:00:00 +0000</pubDate>
      
      <guid>/jp/2022/02/22/blackpill-2/</guid>
      <description>STM32F411CEが載っているblackpillの導入記録の続きです。
HID BOOTLOADER の復元準備 前記の方法でQMKをDFUで内蔵フラッシュメモリーの0x800 0000から導入すると上書きされてしまいます。書き換えできるメモリーの最後にbootloaderを置くAVRと異なり、ARM系のSTM32Fはフラッシュの最初の0x800 0000にBootloader等を置かれているからです。
STM32F103のような、ROM化されたUSB対応bootloaderが無いMCUの場合にはHID BOOTLOADERが必要ですが、STM32F411等はROMがDFUをサポートしてUSB経由のファームウエアー書き換えに対応しているので、HID BOOTLOADERは必須要素技術ではありません。ここは、後学のため元のHID BOOTLOADERの復元法を記します。元々はA9-A12ピン問題で悩んでいた際の学習ノートです。
最初に入っていたHID Bootloaderは、ベンダーの WeActTC の技術情報サイトを覗き入手します。
https://github.com/WeActTC HEXファイルやバイナリーのホストプログラムとともに、元ネタサイト情報もありました。
https://github.com/Serasidis/STM32_HID_Bootloader ARDUINO作成のスケッチのアップロードは、WeAct_HID_Flash-CLIで単純にBINファイルを書いているので、ARDUINO系のシステムでSTM32F103と共通のファームウエアーを作成し使用するには、HID_Bootloaderも良いかもしれません。
アドレス ベンダーの WeActTCの技術情報サイトから落としたGIT repo中の情報によると、HID Bootloaderの APP forwarding addressは0x8004000だそうです。 STM32F103と違いSTM32F411はフラッシュの書き換え単位が16KBあるので、これだけのスペース空けています。
ROM Addr 0x8000000 Bootloader 16KB 0x8004000 APP &amp;hellip;.. END つまり元々ボード上のMCUに書き込まれていたのHID Bootloaderには0x800 0400 に読み込まれて実行されるように作成したファームウエアーが必要です。
QMKは通常0x800 0000 に書き込み実行するファームウエアーを作成するので、QMKファームウエアーの導入にHID Bootloaderは使えません。
HEXファイル WeActが提供するプロプライエタリーのHEXファイルは以下:
HID Bootloader: MiniSTM32F4x1/Soft/WeAct_HID_FW_Bootloader/Bootloader/WeAct_HID_Bootloader_F4x1.hex TESTアプリ: MiniSTM32F4x1/Soft/WeAct_HID_FW_Bootloader/APP/stm32f411_APP_test 0x8004000.hex 電源接続下での、DFUへのはいり方 BOOT0 と reset キーの同時押し 先に、resetキーのリリース 0.5秒後、BOOT0キーのリリース DFU接続の確認法 $ journalctl -f --no-hostname ... usb 6-1.4.2: new full-speed USB device number 33 using xhci_hcd usb 6-1.</description>
    </item>
    
    <item>
      <title>STM32F411CE (1)</title>
      <link>/jp/2022/02/07/blackpill-1/</link>
      <pubDate>Mon, 07 Feb 2022 00:00:00 +0000</pubDate>
      
      <guid>/jp/2022/02/07/blackpill-1/</guid>
      <description>基本のSTM32F系の安価だけど、純正STMチップ(同等品でない)が載っていそうな 小型のデモボードとして、WeActのblackpillをAliexpressの正規ショップ から購入しました。STM32F411CEが載っています。
WeActのデバイス情報 https://github.com/WeActTC/MiniSTM32F4x1 PCB回路要点 IC PIN 機能 動作 7 NRST RESET SW, PUSH=0 , NORMAL=1 44 BOOT0 BOOT SW, PUSH=1, NORMAL=0 20 PB2 / BOOT1 NORMAL=0 (pull down res.) 10 PA0 / WKUP1 USER KEY, NORMAL=1, PUSH=0 2 PC13 / BLUE LED, LED_ON=0 STM32のメモリー 0x0000 0000 - 0x0007 FFFF (REMAPされる) &amp;ndash; The code area 通常 BOOT0は押されていないので: Flash memoryをさしている つまりユーザー作成のFirmware実行 BOOT0 pushed: System memory (BOOT0 pushed) CU内臓のBOOTLOADERの実行, STM32F411の場合はUSB経由のDFUもサポート 0x2000 0000 - 0x2002 0000 SRAM1 (128 KB) &amp;ndash; The data area 0x0800 0000 - 0x0807 FFFF Flash memory Flash memory (512KB) 0x1FFF 0000 - 0x1FFF 77FF System memory (32MB) 起動 the CPU fetches the top-of-stack value from address 0x0000 0000, the CPU starts code execution from the boot memory starting from 0x0000 0004.</description>
    </item>
    
  </channel>
</rss>
