<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Dictionary on Goofing Osamu</title>
    <link>/tags/dictionary/</link>
    <description>Recent content in Dictionary on Goofing Osamu</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 13 Jul 2021 01:33:12 +0900</lastBuildDate>
    <atom:link href="/tags/dictionary/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>日本語単語頻度 (2)</title>
      <link>/jp/2019/05/27/word-freq-02/</link>
      <pubDate>Mon, 27 May 2019 00:00:00 +0000</pubDate>
      <guid>/jp/2019/05/27/word-freq-02/</guid>
      <description>以前書いた、Unidicを用いた単語出現頻度情報 をさらに読み込んでみた。&#xA;品詞ごとのBCCWJの表中出現語数比率 BCCWJの表中の語彙の品詞ごとの出現語数比率の高頻度部分は：&#xA;単語 頻度(%) 名詞-普通名詞-一般 48.11% 名詞-固有名詞-人名-一般 12.10% 名詞-固有名詞-地名-一般 8.25% 名詞-固有名詞-人名-名 5.80% 名詞-普通名詞-サ変可能 5.39% 動詞-一般 5.10% 名詞-固有名詞-人名-姓 4.98% 名詞-固有名詞-一般 4.52% 副詞 1.66% 名詞-普通名詞-形状詞可能 0.85% 形状詞-一般 0.74% 形容詞-一般 0.42% 接尾辞-名詞的-一般 0.36% 名詞-固有名詞-地名-国 0.28% 名詞-普通名詞-助数詞可能 0.28% 名詞-普通名詞-副詞可能 0.23% かな漢字変換のデーターベースの辞書を辞書形をキーとして作ると、 その構成はざっくり：&#xA;「名詞-普通名詞-一般」が、約50%です。 「名詞-固有名詞」等が、30%です。 活用語は、コアの「動詞」、「形状詞」、「形容詞」等が約8%ぐらい、 これに「名詞-普通名詞-サ変可能」等が約7%ほどあるのを加えると、 合わせて約15%です 残りは約5%です。 ここで「形状詞」は、私が習ったころの日本の学校の国語の時間に教える 文法では「形容動詞」と言っていた「～だ」という単語の品詞です。&#xA;活用語を展開すると、口語だけで６ー８に分かれる。だから、 かな漢字変換のデーターベースの辞書を活用語を展開してて作ると、 収録語彙数は倍増し、その構成はざっくり：&#xA;「名詞-普通名詞-一般」が、約30%です。 「名詞-固有名詞」等が、18%です。 活用語は、合わせて約50%です 残りは約3%です。 活用語を展開しない辞書を使うために検索時に活用形を組み込む 複雑なロジックを導入するデメリットを考えると、辞書サイズが 辞書形で20万語程度なら、 200K3Bytes/char6文字*2(活用形展開)*2(キーと値)=14MB 程度なので悪い話ではなさそう。&#xA;現行Anthyのバイナリー辞書は、活用形展開していないで23MB程度の辞書サイズ があるがこれは用例辞書も含んでいる。&#xA;あくまで主観ですが、たとえかな漢字変換データーが50MBとなっても 現在のHW事情なら別に問題ないので、あまり細かく辞書サイズを詰める 必要はないようです。&#xA;品詞ごとのコーパス中出現語数比率 コーパス中での語彙の発現頻度(pmw)を考慮した、コーパス中での語彙の 品詞ごとの出現語数比率の高頻度部分は：&#xA;単語 頻度(%) 助詞-格助詞 17.</description>
    </item>
    <item>
      <title>Anthyの辞書ファイル(1)</title>
      <link>/jp/2019/05/10/jpn-ime-resource-05/</link>
      <pubDate>Fri, 10 May 2019 00:00:00 +0000</pubDate>
      <guid>/jp/2019/05/10/jpn-ime-resource-05/</guid>
      <description>まず、辞書関連ファイルの要点をレビューしました。&#xA;使ったanthyのソースはDebian BusterのベースとなるgniibeさんがUTF-8化パッチ を掛けかなり変更した0.3です。&#xA;Anthyの辞書関連定義ソースファイル 変換候補漢字が、読みに対して、その品詞、頻度とともに定義される「辞書」ファイルは、 その作成経緯により2種類の拡張子が使われています。&#xA;Anthy用辞書: *.t Canna用辞書: *.ctd これらはすべてalt-cannadicとmkworddicにあります。&#xA;単純な品詞や頻度だけでは正しい漢字選択ができない場合に対応する「用例辞書」 ファイルudictはmkworddicにあります。&#xA;Anthyの辞書ソースファイル処理機構 上記の「辞書」ファイルと「用例辞書」ファイルは、mkworddicディレクトリー 中にビルド時に生成されるmkworddicにより読み込まれ、さらに負の頻度を持つ 「逆変換用辞書」データーが追加作成されます。&#xA;これを詳しく見ていきましょう。&#xA;mkworddicが-fオプションでdict.argsを指定して起動されます。dict.args は通常同一ディレクトリー内のdict.args.in`からビルド時作成されます。 これを変更することで組み込まれる辞書は調節できます。&#xA;dict.argsの設定内容の処理は、mkworddic/mkdic.c:execute_batch()で処理されます。&#xA;readコマンドは指定された「辞書」ファイルをread_dict_file()で読み込みます。 read_ucコマンドは指定された「用例辞書」ファイルをread_udict_file()で読み込みます。 build_reverse_dictコマンドは「逆変換用辞書」データーをbuild_reverse_dict()で作成し追加します。 writeコマンドはメモリー中の全辞書データーを指定されたファイル（anthy.wdic）にwrite_dict_file()で書き出します。 詳細は、mkworddicのソースをmkworddic/mkdic.cから追いかけると見えてきます。&#xA;ちなみに、anthy.wdicは、mkanthydic/ディレクトリーのファイルから生成するビルド 時用のバイナリープログラムmkfiledicにより、単語の条件付き連鎖発現頻度情報を整理 して生成する各種情報ファイルと統合され、漢字かな変換実行時に用いられるanthy.dic となります。&#xA;Anthyの辞書ソースファイル構造(基本) mkanthydic/mkdic.c:push_back_word_entry_line()からコードを読むと辞書ファイルの 構造が分かります。&#xA;最も典型的な辞書ソースデーターファイルの構造は、半角スペースで区切られた以下の 構造をしています。&#xA;&amp;lt;ひらがな見出し語&amp;gt; [#&amp;lt;品詞&amp;gt;[*&amp;lt;頻度&amp;gt;] [&amp;lt;変換後文字列&amp;gt;]... ]... &amp;lt;ひらがな見出し語&amp;gt; (index)は、全角ひらがな以外の半角・全角の数字や記号も許されます。 *&amp;lt;頻度&amp;gt;は省略可能です。 &amp;lt;変換後文字列&amp;gt;は同音異字に関して繰り返し羅列可能です。 #&amp;lt;品詞&amp;gt;*&amp;lt;頻度&amp;gt; [&amp;lt;変換後文字列&amp;gt;]... も繰り返し羅列可能です。 #&amp;lt;品詞&amp;gt;に関しては後述する。&#xA;ただし、現在は「&amp;lt;ひらがな見出し語&amp;gt;」は30文字までに制約されています。この他、 プログラム内の各種文字列長は固定長でいろいろ制約があることが多いので要注意です。&#xA;またindex中の濁点は通常「が」のように１文字表現をしますが、１文字表現の無い 「う゛」は２文字表記されています。&#xA;辞書中に「う゛」を「ヴ」で置き換えた項目を入れることはDebianが使っている 0.3のソース中ではされていません。現在のanthyの入力対応は、ひらがな・ カタカナ・ローマ字で、入力はひらがなに変換してから漢字変換操作がされるので、 「ヴ」は自動的に「う゛」となります。だからたとえ、フロントエンドがibusの 場合で「ヴ」をひらがなに混ぜて返す仕様となっていても問題は起こりません。 辞書中の「&amp;lt;ひらがな見出し語&amp;gt;」に「ヴ」を書くのを加えるのは 使われない無駄なデーターとなるので好ましくありません。（辞書ファイル中の README中の文言は無視しましょう）&#xA;src-main/main.c:need_reconvert() src-worddic/word_dic.c:anthy_get_seq_ent_from_xstr() このソース辞書から作られるanthy.dic辞書中の、素（raw）の「&amp;lt;頻度&amp;gt;」の 典型的値は以下です：&#xA;良く使われる言葉は大きく、５００ー６００程度 普通の言葉は、１００ー２００程度 単漢字などは、１０ー３０程度 指定が無い場合には、１ Anthyの辞書ソースファイル構造（複合語） 複合語の収録のために、「&amp;lt;変換後文字列&amp;gt;」には特別の記述法があります。</description>
    </item>
    <item>
      <title>unidic固有名詞カタカナ問題</title>
      <link>/jp/2019/05/06/jpn-ime-resource-04/</link>
      <pubDate>Mon, 06 May 2019 13:00:00 +0900</pubDate>
      <guid>/jp/2019/05/06/jpn-ime-resource-04/</guid>
      <description>Unidicの頻度情報は日本人名をカタカナ登録で処理している。&#xA;かな漢字変換のデーターを作るのにはこれではまずいので別情報で漢字補完すべきです。 さてどうするべきか？&#xA;姓名 2019-05-07:内容追加&#xA;日本人姓名をカタカナ表記化で集約統計するのは頻度情報集計時の追加後処理 操作のようです。&#xA;mecab処理に使うunidicの元ファイルの辞書lex.csvには漢字も収録されていました。&#xA;たとえば、「ヒロシ」だと：&#xA;ひろし,14726,15499,7326,名詞,固有名詞,人名,名,... ヒロシ,14726,15499,1100,名詞,固有名詞,人名,名,... 博,14726,15499,5515,名詞,固有名詞,人名,名,... 博史,14726,15499,6555,名詞,固有名詞,人名,名,... 博司,14726,15499,6556,名詞,固有名詞,人名,名,... 博士,14726,15499,8204,名詞,固有名詞,人名,名,... 博師,14726,15499,6556,名詞,固有名詞,人名,名,... 博志,14726,15499,6556,名詞,固有名詞,人名,名,... 博至,14726,15499,6556,名詞,固有名詞,人名,名,... 博詞,14726,15499,6556,名詞,固有名詞,人名,名,... 博資,14726,15499,6556,名詞,固有名詞,人名,名,... 啓,14726,15499,7246,名詞,固有名詞,人名,名,... 啓史,14726,15499,6556,名詞,固有名詞,人名,名,... ... 数えると「名詞,固有名詞,人名,名」で読みが「ヒロシ」が８６ありました。 他の名前情報源の列挙数と比較して遜色なくこれだけで十分な感じです。&#xA;ちなみに、lex.csvの最初の4つは必須エントリの意味は&#xA;表層形 左文脈ID (単語を左から見たときの文脈 ID) 右文脈ID (単語を右から見たときの文脈 ID) 単語コスト (小さいほど出現しやすい) となっています。&#xA;こうなると、４つ目のエントリが最小の1100の「ヒロシ」が代表とも言えるし、 漢字で選ぶなら「博」を第一番目漢字変換候補とするなどで簡単に候補序列の 設定にも対応できそうです。&#xA;難しそうだった名前でこれですから、姓の方はもっと簡単ですね。&#xA;以下の記事の姓名の頻度感は面白いので、ここにほぼ元の形で残し、改訂します&#xA;ちなみに、頻度関連情報ですが、頻度順位（rank）には「#」を数字の前につけ表記し、 発生頻度はpmw(1000,000語あたりの発生数)で表記しています。&#xA;名字 名字は地名と重なることが多いので、その漢字から漢字設定をし、 品詞を固有名詞（地名・名字可）とでもしていけば、多くは漢字の補完が 来きる可能性がある。特に全国郵便番号の地名（漢字＋カナ）は網羅的で有効。 沖縄の変わった名前なども、意外と地名にあります。&#xA;名字の参考情報 全国名字ランキング による情報にrank pmwを合わせて比較 （40000位まである公開順位情報の一部のFAIR引用）&#xA;RANK PMW cost 1位&#x9;佐藤&#x9;およそ1,880,000人　#2773 30 4251 2位&#x9;鈴木&#x9;およそ1,802,000人 #2855 29 2538 4位&#x9;田中&#x9;およそ1,340,000人 #2289 38 2734 10位&#x9;加藤&#x9;およそ890,000人 #3916 19 5087 20位&#x9;清水&#x9;およそ533,000人 #5854 11 2814 40位&#x9;坂本&#x9;およそ327,000人 #6348 10 4586 100位&#x9;杉本&#x9;およそ182,000人 #13375 3.</description>
    </item>
    <item>
      <title>辞書ライセンス問題</title>
      <link>/jp/2019/05/06/jpn-ime-resource-03/</link>
      <pubDate>Mon, 06 May 2019 13:00:00 +0900</pubDate>
      <guid>/jp/2019/05/06/jpn-ime-resource-03/</guid>
      <description>辞書のライセンス V.2.x以降の現代書き言葉UniDic（旧名：unidic-mecab）および、Ver.2.2.x以降の 現代話し言葉UniDicは、完全なフリーソフトウェアになりました。 GPL/LGPL/BSD Licenseのトリプルライセンスですので、営利目的での利用模含めて 自由に行うことができます。一番良いです。&#xA;Jumann++ や mecab-ipadic-neologdは、&amp;ldquo;Apache License, Version 2.0&amp;rdquo; です。&#xA;SJ3 は BSDライセンスのようです。&#xA;ちなみに、&amp;ldquo;Apache License, Version 2.0&amp;quot;はGPLとのライセンスとしての互換性を改善 されているとのこと。&#xA;これらデーターベース辞書を利用して逆変換できないところまで抽出加工処理して、 特定の目的のためのデーター構造を持った内容のデーターベース辞書を 「新たなデーターベース辞書」として作った場合、そのライセンスはどうあるべきかは、 基本的に「新たなデーターベース辞書」の作成者が設定すると考えます。&#xA;そもそも辞書データーとは、元の著作権のある各種文書データーから、元文書での使用 例を参考に元の著作権の影響を受けないよう編集し新規に作成したもので、他の辞書 情報も作成の際に参考にして作成しるわけで、それでも新規性ある別の物として作成 される物です。&#xA;まず、元情報を利用条件を守って利用する必要はあります。ただ、研究調査での使用 許可等があれば、それを使って「新たなデーターベース辞書」を作成した場合、 元ファイルを同梱しない限り、「新たなデーターベース辞書」の頒布に元辞書を継承 する必要は無いと考えます。&#xA;もちろん、他者が作成した元情報が逆変換で選択抽出できる場合は、元ファイル自体 が物理的に含まれなくとも元ファイルを同梱と実質的に同じ状況ということで、 「新たなデーターベース辞書」だけではないので、元データーのライセンスの 頒布条件の回避はできません。つまり、その場合には「新たなデーターベース辞書」 も元ファイルの頒布条件を遵守をする必要があるのは言うまでもありません。&#xA;新規辞書作成を考える場合、情報源として入手した頻度情報は「事実」なので、 その物自体は排他的に所有できないと考えます。ただし、提供形態やデーター構成 には著作権があるかもしれないので、新規データー作成する際には完全に逆変換がで きないよう、作成者の新規判断と折込や・作成者が工夫した方法で他情報と組み合 わせたり・数値情報の目的に合わせた粗化処理がされるべきです。&#xA;漢字かな変換データー辞書の作成で、参照辞書の使用条件を守りながら研究用に使用し、 同音異字のpmwをひらがな表記が同じ品詞の和で抽出するとか、出現順位で抽出する とか、10倍ごとのバケット表記とする等で抽出することで、逆変換不可能にした データーとすれば、その作成されたデーターは「新たなデーターベース辞書」と考 えられ、それら抽出済みデーターをソースとして用いる限り参照辞書の頒布ライセン ス制約の対象外と考えます。&#xA;同音異字は結局何らかの少し離れたところまでの近接語効果を入れない限り、頻度だ けや文法的制約からだけでは解消しないので、同音異字の中の頻度１番以外の言葉の 以外は頻度情報は順位以外は重要ではありません。&#xA;まあ、如何にライセンスコンタミを防ぐかは微妙な問題ではあります。</description>
    </item>
    <item>
      <title>日本語辞書リソース</title>
      <link>/jp/2019/05/05/jpn-ime-resource-02/</link>
      <pubDate>Sun, 05 May 2019 12:00:00 +0900</pubDate>
      <guid>/jp/2019/05/05/jpn-ime-resource-02/</guid>
      <description>フリー（無償）で入手し、研究用なら制約無く使用ができる各種辞書の情報です。&#xA;Unidic 語彙数: 87万語 (2018-03版) GPL/LGPL/BSD License 新　UniDic 2.2GB 旧　UniDic MeCab で UniDic 辞書を使ってみる $ wc -l lex.csv 872831 lex.csv 活用形はすべて展開して、それぞれ１行のデーターとなっている。&#xA;もし頻度表が全辞書形と考えると、表層形900K/辞書形180Kと大きいとも言えるが、 スマホ写真１枚分のデーターより小さいともいえる。&#xA;canna辞書(Anthy) 語彙数: 13万の読みの異なる言葉 GPL $ wc -l gcanna.t 137488 gcanna.t このファイルは現代的な感覚では、4.6MBと非常に小さい。&#xA;各種情報も織り込んだBinary辞書のanthy.dicでも23MB程度。&#xA;Mozc /usr/lib/mozc/mozc_serverは、約18MBという巨大なサイズがある。&#xA;これは、辞書をプログラムないのメモリーイメージで静的内蔵しているためと 推察される。でも写真数枚程度で、現代的な感覚ではメモリー常駐させるのが 十分可能なサイズともいえる。&#xA;$ du -Sh . 59M $ wc -l id.def 2652 id.def ソース中の辞書ファイルサイズ概算59MBと６０MB近くありAnthyより１桁大ききい。 品詞分類数は2652ときめ細かい。&#xA;ソース中の辞書ファイルは100K行のデーターが定義されたファイルで １０個ほどあるので、展開済み登録語彙数は約１００万語程度と見受ける。 こうみてもanthy等の１０倍の単語登録がある。(ただし、Anthyは１行に複数語 登録するので実際の差は小さいかもしれない。)&#xA;まあデーターが巨大なので変換精度は上がるが、リソース消費が大きく動作が重く なる懸念がある。&#xA;Jumann++ 基本語彙辞書 3万語 WEB等含む合計 90万語 Apache License, Version 2.0 mecab-ipadic-neologd 語彙数: 55万語 https://github.</description>
    </item>
    <item>
      <title>日本語単語頻度 (1)</title>
      <link>/jp/2019/02/09/word-freq/</link>
      <pubDate>Sat, 09 Feb 2019 00:00:00 +0000</pubDate>
      <guid>/jp/2019/02/09/word-freq/</guid>
      <description>BCCWJ Unidicを用いた単語出現頻度情報&#xA;語彙調査データ： (古い) https://pj.ninjal.ac.jp/corpus_center/archive.html （２００４） https://pj.ninjal.ac.jp/corpus_center/files/goihyo_frq_ver.1.0.txt 3万語 『現代日本語書き言葉均衡コーパス』語彙表：(新しい) https://pj.ninjal.ac.jp/corpus_center/bccwj/freq-list.html （２０１１） https://pj.ninjal.ac.jp/corpus_center/bccwj/bcc-chu-suw.html (1.0E8 data, 短単位語彙表：18万語網羅、748MB） https://pj.ninjal.ac.jp/corpus_center/bccwj/bcc-chu-luw.html (8.3E7 data, 長単位語彙表: 243万語網羅、1GB） $ wc -l BCCWJ_frequencylist_* 2434722 BCCWJ_frequencylist_luw_ver1_1.tsv 185137 BCCWJ_frequencylist_suw_ver1_1.tsv 辞書形ごとにまとめて頻度統計を行っている。&#xA;活用語の辞書形集約はあまり違和感が無かったが、要注意は固有名詞である。 人名の姓と名はカタカナ表記を辞書形（LEMMA)として集約されている。&#xA;BCCWJ短単位語彙の累積頻度 単語 頻度順位 頻度(pmw) 累積頻度 の 1 48383 0.048 と 10 21773 0.303 持つ 100 885 0.556 決まる 1000 90 0.752 胃癌 10000 5.3 0.933 阿姨 100000 0.05 0.997 (6 sample) んふ 150000 0.01 1.000 2019-05-22: updated&#xA;BCCWJ短単位語頻度彙表とmecabのコスト値の対比 WORD rank pmw cost (mecabより) の #1 48383 -573 (固有POS対象) に #2 34188 -608 (固有POS対象) は #4 31448 -1390 (固有POS対象) 為る #8 24508 2642 (固有POS対象) * です #16 7690 811 (固有POS対象多し) 三 #32 2985 937 (固有POS対象多し) 時 #64 1548 3808 (固有POS対象多し) 必要 #128 674 3967 現在 #256 325 2155 料 #512 171 6594 準備 #1024 88 3808 回す #2048 43 6516 広域 #4096 18 5149 敬意 #8191 7 4084 炒め物 #16385 2.</description>
    </item>
  </channel>
</rss>
