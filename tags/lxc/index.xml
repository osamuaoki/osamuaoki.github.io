<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Lxc on Goofing Osamu</title>
    <link>/tags/lxc/</link>
    <description>Recent content in Lxc on Goofing Osamu</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 06 Sep 2025 13:50:12 +0900</lastBuildDate>
    <atom:link href="/tags/lxc/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Web UI with INCUS (9)</title>
      <link>/en/2024/03/16/lxc-9/</link>
      <pubDate>Sat, 16 Mar 2024 00:00:00 +0000</pubDate>
      <guid>/en/2024/03/16/lxc-9/</guid>
      <description>Here is a series of memos of me trying to use LXC/LXD and INCUS on Debian 12 (bookworm).&#xA;I am using Incus for Debian 12 from Zabbly package repository.&#xA;Incus web UI Set up port 8443 for Incus:&#xA;$ incus config set core.https_address &amp;#34;:8443&amp;#34; Then start any modern browser with it URL pointing to https://localhost:8443.&#xA;Don&amp;rsquo;t be afraid of WARNINGS and proceed :-) Click &amp;ldquo;Create a new certificate&amp;rdquo; button and follow the web GUI instruction.</description>
    </item>
    <item>
      <title>Virtual machine with INCUS (8)</title>
      <link>/en/2024/03/15/lxc-8/</link>
      <pubDate>Fri, 15 Mar 2024 00:00:00 +0000</pubDate>
      <guid>/en/2024/03/15/lxc-8/</guid>
      <description>Here is a series of memos of me trying to use LXC/LXD and INCUS on Debian 12 (bookworm).&#xA;I am using Incus for Debian 12 from Zabbly package repository.&#xA;Full DE in VM and its storage size I had problem with VM created by INCUS when I installed full DE and upgraded to the testing due to &amp;ldquo;disk full`.&#xA;In order to check reason for the above problem, I installed most DE (w/o Office programs) without upgrade again.</description>
    </item>
    <item>
      <title>Virtual machine with INCUS (7)</title>
      <link>/en/2024/03/13/lxc-7/</link>
      <pubDate>Wed, 13 Mar 2024 00:00:00 +0000</pubDate>
      <guid>/en/2024/03/13/lxc-7/</guid>
      <description>Here is a series of memos of me trying to use LXC/LXD and INCUS on Debian 12 (bookworm).&#xA;In order to make full transition to incus, I will trace what I did with lxc with incus while addressing not only container systems but also virtual machine systems.&#xA;I am using Incus for Debian 12 from Zabbly package repository.&#xA;Simple start of Container and VM with Incus Let me trace Container with LXC/LXD (1).</description>
    </item>
    <item>
      <title>Container with INCUS (6)</title>
      <link>/en/2024/03/02/lxc-6/</link>
      <pubDate>Sat, 02 Mar 2024 00:00:00 +0000</pubDate>
      <guid>/en/2024/03/02/lxc-6/</guid>
      <description>Here is a series of memos of me trying to use LXC/LXD and INCUS on Debian 12 (bookworm).&#xA;What is LXD and Incus It has been some time since Container with LXC/LXD (1).&#xA;Upstream Incus (0.6 released 2024-02-23) is at https://github.com/lxc/incus by linuxcontainers.org &amp;ldquo;Incus 0.6 has been released&amp;rdquo; announcement gives explanations on technical changes. The command name has been changed to incus. コンテナと仮想マシンのマネージャ&amp;quot;Incus&amp;quot; (Japanese) also gives a nice overview. Incus is available for Debian 12 from Zabbly package repository.</description>
    </item>
    <item>
      <title>Container with LXC/LXD (5)</title>
      <link>/en/2023/11/15/lxc-5/</link>
      <pubDate>Wed, 15 Nov 2023 00:00:00 +0000</pubDate>
      <guid>/en/2023/11/15/lxc-5/</guid>
      <description>Here is a series of memos of me trying to use LXC/LXD on Debian 12 (bookworm).&#xA;YAML to allow IPCs for Wayland + X + sounds Here is a YAML data example (waylandx.yaml) to add disk device for many IPC sockets supporting Wayland + X + sounds.&#xA;config: boot.autostart: false raw.idmap: both 1000 1000 security.nesting: &amp;#34;true&amp;#34; user.user-data: | #cloud-config users: - name: osamu lock_passwd: True groups: [adm, audio, cdrom, dialout, dip, floppy, plugdev, sudo, video] sudo: [&amp;#34;ALL=(ALL) NOPASSWD:ALL&amp;#34;] shell: /bin/bash write_files: - path: /usr/local/bin/mystartup.</description>
    </item>
    <item>
      <title>Container with LXC/LXD (4)</title>
      <link>/en/2023/11/14/lxc-4/</link>
      <pubDate>Tue, 14 Nov 2023 00:00:00 +0000</pubDate>
      <guid>/en/2023/11/14/lxc-4/</guid>
      <description>Here is a series of memos of me trying to use LXC/LXD on Debian 12 (bookworm).&#xA;Running GUI application in container Unlike console applications, running GUI applications in container is a bit complicate. For now, I found some HOWTOs:&#xA;Incus / LXD profile for GUI apps: Wayland, X11 and Pulseaudio (2023-11-17) Use Wayland and Xorg applications (updated 2023-10-07) LXD Containers for Wayland GUI Apps (2022-08-28) How to run GUI apps in LXD containers (2022-08-04) HOWTO: Use the Host’s Wayland and XWayland Servers inside containers (updated 2022-03-18) GUI application via Wayland from Ubuntu LXD container on Arch Linux host (2018-01-01) All these interesting references are not always using GNOME wayland under the Debian bookworm environment.</description>
    </item>
    <item>
      <title>Container with LXC/LXD (3)</title>
      <link>/en/2023/11/13/lxc-3/</link>
      <pubDate>Mon, 13 Nov 2023 00:00:00 +0000</pubDate>
      <guid>/en/2023/11/13/lxc-3/</guid>
      <description>Here is a series of memos of me trying to use LXC/LXD on Debian 12 (bookworm).&#xA;Clean up d0 instance for experiment In following examples, the instance d0 is always deleted in advance without mentions by:&#xA;$ lxc stop d0 $ lxc delete d0 or simply:&#xA;$ lxc delete d0 -f Merging YAML settings As seen in following examples, YAML settings of lxc are merged by key for dictionary.&#xA;subuid and subgid on Debian with LXD UID and GID:</description>
    </item>
    <item>
      <title>Container with LXC/LXD (2)</title>
      <link>/en/2023/11/12/lxc-2/</link>
      <pubDate>Sun, 12 Nov 2023 00:00:00 +0000</pubDate>
      <guid>/en/2023/11/12/lxc-2/</guid>
      <description>Here is a series of memos of me trying to use LXC/LXD on Debian 12 (bookworm).&#xA;Default LXD Debian image issues Let me simply use the default LXD Debian image to launch d0 instance with:&#xA;$ lxd launch images:debian/12/cloud d0 Then, the resulting d0 image has a few glitches to my taste:&#xA;The primary user in the container is always debian having UID=1000, GID=1001 The netdev group is generated as GID=1000 (this is system group and should have GID somewhere between 100 and 999.</description>
    </item>
    <item>
      <title>Container with LXC/LXD (1)</title>
      <link>/en/2023/10/11/lxc-1/</link>
      <pubDate>Wed, 11 Oct 2023 00:00:00 +0000</pubDate>
      <guid>/en/2023/10/11/lxc-1/</guid>
      <description>Here is a series of memos of me trying to use LXC/LXD on Debian 12 (bookworm).&#xA;What is LXC LXC is a well-known Linux container runtime that consists of tools, templates, and library and language bindings. It&amp;rsquo;s pretty low level, very flexible and covers just about every containment feature supported by the upstream kernel.&#xA;What is LXD and Incus Upstream LXD (5.18 released 2023-09-20) is at https://github.com/canonical/lxd by Canonical LXD is a modern, secure and powerful system container and virtual machine manager.</description>
    </item>
    <item>
      <title>仮想環境(6)</title>
      <link>/jp/2021/02/13/virt-06/</link>
      <pubDate>Sat, 13 Feb 2021 00:00:00 +0000</pubDate>
      <guid>/jp/2021/02/13/virt-06/</guid>
      <description>Linux Namespaces の雰囲気が分かったところで、非特権ユーザー権限から立ち 上げられたLXC仮想環境を作ってみます。&#xA;NOTE: (2023-12-25/2024-03-14) LXD/Incusを使い出したら、カスタマイズした環境管理が便利なので以下のシェル操作ベースのコンテナ管理手法は休眠です。&#xA;非特権LXC実行環境整備 LXC (1:4.0.6-1) をBulleseye環境で/usr/share/doc/lxc/README.Debianの &amp;ldquo;Unprivileged containers&amp;quot;に従って設定していきます。(2021/02)&#xA;まずKERNELがunprivileged user namespacesを有効にしていることを確認します。&#xA;$ sudo uname -a Linux **** 5.10.0-3-amd64 #1 SMP Debian 5.10.13-1 (2021-02-06) x86_64 GNU/Linux $ sudo sysctl kernel.unprivileged_userns_clone kernel.unprivileged_userns_clone = 1 ユーザーアカウント設定の/etc/subuidと/etc/subgidはすでに設定されていました。 これらは親システムのUIDやGIDからLXCコンテナ内から見えるUIDやGIDへの対応関係定義 しています。&#xA;ネットワーク設定は以下を実行：&#xA;$ NAME=$(id -un) $ sudo sh -c &amp;#34;echo $NAME veth lxcbr0 10 &amp;gt;&amp;gt; /etc/lxc/lxc-usernet さらに、~/.config/lxc/default.confのユーザー設定を/etc/subuidと /etc/subgidに合わせて以下でします。&#xA;$ mkdir -p ~/.config/lxc $ cat &amp;gt;~/.config/lxc/default.conf &amp;lt;&amp;lt; EOF lxc.include = /etc/lxc/default.conf lxc.idmap = u 0 100000 65536 lxc.</description>
    </item>
    <item>
      <title>仮想環境(3)</title>
      <link>/jp/2021/01/28/virt-03/</link>
      <pubDate>Thu, 28 Jan 2021 00:00:00 +0000</pubDate>
      <guid>/jp/2021/01/28/virt-03/</guid>
      <description>引き続きchrootの強化版のようなLXCを使っての仮想環境作成を特権ユーザーが 作成する簡単なケースを深堀りします。&#xA;LXC仮想環境の停止 仮想環境のカスタマイズした起動をするためには、作成し起動した仮想環境のSTATEを STOPPED(停止)に確実にします。&#xA;$ sudo lxc-stop -n sid $ sudo lxc-ls -f NAME STATE AUTOSTART GROUPS IPV4 IPV6 UNPRIVILEGED buster STOPPED 0 - - - false sid STOPPED 0 - - - false LXC仮想環境とのデーター共有起動 仮想環境のカスタマイズした起動時に、設定変数を指定することで、ホスト側の /home/fish/srcを仮想環境内の/home/fishとしてアクセスできるように共有化 された仮想環境として起動できます。この仮想環境環境にユーザーアカウントに ログインするまでの手順は以下です。&#xA;$ sudo lxc-start -n sid \ -s &amp;#34;lxc.mount.entry=/home/fish/src home/fish none bind 0 0&amp;#34; $ sudo lxc-attach -n sid root@sid:/# login sid login: fish Password: ... fish@sid:~$ ここで仮想環境内のホームディレクトリーで見えるのは/home/fish/srcと同一デバイス上の ファイルだけです。(再帰的マウントはされません。)&#xA;このLXC仮想環境内でパッケージビルドなどをすれば綺麗な環境ででき、さらにその結果に ホスト側から直接アクセスできます。</description>
    </item>
    <item>
      <title>仮想環境(2)</title>
      <link>/jp/2021/01/08/virt-02/</link>
      <pubDate>Fri, 08 Jan 2021 00:00:00 +0000</pubDate>
      <guid>/jp/2021/01/08/virt-02/</guid>
      <description>chrootを使ってのデバグ用のsid仮想環境作成をpbuilder/cowbuilderでと言うのは 少々強引です。とはいえ直接chrootやmountコマンドで仮想環境作成というのも 面倒です。&#xA;そこで、chrootの強化版のような環境設定インフラが整ったLXCを使ってのパッケージ 作成やデバグ用や古い環境下での動作確認等に使え、システムの立ち上げや動作が 軽快な仮想環境作成を試みます。(KVMは悪くは無いですが、重いことは否めません)&#xA;ちなみに、DebianではLXDはまだパッケージされていないので、ここでは裸の LXC 4.0 のインフラを使います。&#xA;WEB上のLXCの情報は古い1.0や2.0の情報とか、新規のUIを提供するLXDの情報が多い ので、bulleseyeベースの現行testing環境で基本操作を行って詳細の確認しています。&#xA;Debianの最新のLXC環境を確認するには、まず/usr/share/doc/lxc/README.Debianを しっかり読む必要があります。ここに書かれたユーザー権限で実行されるコンテナ (unprivileged containers) 関連の手動設定は重要です。&#xA;まずは、簡単なROOT権限で実行されるコンテナ中心に始めます。&#xA;LXC仮想環境作成 LXCを使ってのパッケージ作成やデバグ用等に使うsid環境の仮想環境作成を試みます。&#xA;$ sudo lxc-create -n sid -t debian -- -r sid もし、ミラーが不調なら、安定そうなUSミラーを使います。&#xA;$ sudo lxc-create -n sid -t debian -- -r sid --mirror=http://ftp.us.debian.org 意外と簡単です。これで、/var/lib/lxc/sid/が作成されます。この中に、sidコンテナ 環境のファイルシステムがrootfsディレクトリー以下に、またそのコンテナ環境の設定 ファイルconfig が作成されています。&#xA;コンテナ環境のファイルシステム:&#xA;# root@goofy:/var/lib/lxc/sid# tree -L 2 -F . ├── config └── rootfs/ ├── bin -&amp;gt; usr/bin/ ├── boot/ ├── dev/ ├── etc/ ├── home/ ├── lib -&amp;gt; usr/lib/ ├── lib32 -&amp;gt; usr/lib32/ ├── lib64 -&amp;gt; usr/lib64/ ├── libx32 -&amp;gt; usr/libx32/ ├── media/ ├── mnt/ ├── opt/ ├── proc/ ├── root/ ├── run/ ├── sbin -&amp;gt; usr/sbin/ ├── selinux/ ├── srv/ ├── sys/ ├── tmp/ ├── usr/ └── var/ コンテナ環境の設定ファイルconfig:</description>
    </item>
  </channel>
</rss>
