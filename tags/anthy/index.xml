<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>anthy on Goofing Osamu</title>
    <link>/tags/anthy/</link>
    <description>Recent content in anthy on Goofing Osamu</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 01 Sep 2019 00:00:00 +0000</lastBuildDate><atom:link href="/tags/anthy/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>AnthyのBuildトライ(2)</title>
      <link>/jp/2019/09/01/jpn-ime-resource-08/</link>
      <pubDate>Sun, 01 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>/jp/2019/09/01/jpn-ime-resource-08/</guid>
      <description>0.4に向けた変更 Debian Busterの(0.3系)のAnthyに関して、Busterはフリーズ中なので、 リリースの邪魔をしない苦肉の策として、機能的に最低限必要なバグ修正のみに 対応したパッケージをDebianのexperimentalに anthy 1:0.3-9 としてアップロードしました。
その後、gniibeさんから連絡があり、私の提案とは少し違ういい感じで改訂され anthy 1:0.4-2 がリリースされました。これでひとまず解決したので、 当面AnthyのBuildトライは休憩することにしました。
過去のBuildトライ時の問題点 治ったとは思いますが、以前気になった点を備忘録でここに記します。
「だよ～ん」無限ループ問題です。これはコーパス修正による回避ではなく、 calctrans.cが呼ぶproccorpus.cを見直し無限ループに入らないようにしました。 bdd71e4 (&amp;ldquo;Ignore problematic line to avoid infinite loop&amp;rdquo;, 2019-05-31)
さらに、平成の市町村合併前のZIPコードのままなのは気になります。まあ、郵便局 の元データーから作り直すのも手なんですが、実際に使えるデーターとするには 一部手動調整があります。ライセンス的にはskkでもmozcでも、どちらのZIPデーター でも良かったのですが、京都市街中心部の歴史的住所がうまく手動調整されていた skkのデーターが気に入ったので、簡単にvimで整形して置き換えました。
波ダッシュ問題 どうも、世間の常識のようですが、「波ダッシュ問題」に気づきました。 Buildトライ時に気づいたことをメモしておきます。
0.3のコーパス中で問題となっていたのは 「～」(UTF-8: EF BD 9E, U+FF5E)全角チルダです。 ibus-anthyでチルダで入力できるのは 「～」(UTF-8: EF BD 9E, U+FF5E)全角チルダです。 ibus-mozcでチルダで入力できるのは 「〜」(UTF-8: E3 80 9C, U+301C)波ダッシュです。
これで気になって、波ダッシュ WAVE_DASH (Shift_JIS:0x8160, Unicode:U+301C)と 全角チルダ FULLWIDTH_TILDE(Shift_JIS:0xFF5E, Unicode:U+FF5E)の違いや状況を 調べてみました。結論は、日本語の文中に書く「波ダッシュ」は本来の「波ダッシュ」 U+301Cが正しいようだ。Windows XP以前のデーターは「波ダッシュ」が見た目で文字化 けするので、これを避けるために「全角チルダ」を本来の「波ダッシュ」の代用に使っ ているようです。
波ダッシュ・全角チルダ問題 波ダッシュ チルダ Wikipedia:表記ガイド: 波ダッシュ https://xhtml.</description>
    </item>
    
    <item>
      <title>AnthyのBuildトライ(1)</title>
      <link>/jp/2019/05/12/jpn-ime-resource-07/</link>
      <pubDate>Sun, 12 May 2019 00:00:00 +0000</pubDate>
      
      <guid>/jp/2019/05/12/jpn-ime-resource-07/</guid>
      <description>Debian Busterの(0.3系)のAnthyは問題がある。
一方、mozcの最新コードや辞書を見たら、昔よりかなり整理され 変なデーターで無理やり特定コーパスのみの最適化というか過学習 の結果のような辞書データーもない。使ってみると正直悪くない。
いまさらanthyを触るのもという感もあるが、せめて以前程度に 動くようにはしたい。特にDebianのパッケージは完全メンテナー モードで、salsaでバグ修正優先での対応を考えます。 （githubは、いろいろ遊ぶかもしれません）
すぐ気づいた明らかなバグ２つは解決法が見えた。
Use UTF-8 for zipcode bug fix. Closes: #927074 Convert depgraph/master.depword to UTF-8. Closes: #923948 後者は文法係り受け定義関連を再構築必要がある。簡単にするには debian/rulesを以下としてDebianのビルドシステムでdebuildと してビルドする必要がある。
override_dh_auto_configure: dh_auto_configure -- --sysconfdir=/etc/anthy --enable-maintainer-mode だが、上手くいかない。ソース壊れている?
UTF-8 での処理のデフォルト化 まず、テスト環境で変な文字が出るので気になっていた、UTF-8廻りを 確認した。
anthy/anthy.hに以下と定義されているので、encoding関係が 初期値の0だと、どうも出力がEUCJPになってしまうようだ。
#define ANTHY_UTF8_ENCODING 2 これは、0にしておかないとdefault_encodingやencodingやprint_encoding などがUTF-8にならない懸念がある。2としている意味を感じなかったので これを変えた。特に以下への影響が気になる。
anthy_putxchar() anthy_putxstr() anthy_putxstrln() これらは、以下で使われている。
mkworddic/mkdic.c src-main/context.c src-splitter/metaword.c src-splitter/wordlist.c src-worddic/record.c src-util/convdb.c test/check.c まあ、道理でparsed_data0がUTF-8環境で読めない。どうもEUCJPで文字列 をはき出しているわけです。これじゃ、まともに動かないのも納得です。 きっと連接の統計がまともにできていないので、連文節変換をすると変な 結果が出るようになったのだろう。とりあえず、修正。
さらによく見ると、calctrans/proccorpus.cが以下になっている。
anthy_conf_override(&amp;#34;CONFFILE&amp;#34;, &amp;#34;../anthy-conf&amp;#34;); これは、ビルド中のソース内のファイルを見てほしいので以下にする。
anthy_conf_override(&amp;#34;CONFFILE&amp;#34;, &amp;#34;../anthy-test-conf&amp;#34;); 無限ループ 上記を対策しても上手くビルドしない。
proccorpusは、たしかに読めるparsed_data0を生成するが処理が止まってしまう。 何か無限ループに落ち込んでいる感じ。</description>
    </item>
    
    <item>
      <title>Anthyの文法係り受け定義(1)</title>
      <link>/jp/2019/05/11/jpn-ime-resource-06/</link>
      <pubDate>Sat, 11 May 2019 00:00:00 +0000</pubDate>
      
      <guid>/jp/2019/05/11/jpn-ime-resource-06/</guid>
      <description>まず、anthy.dic作成時の構成要素のanthy.depに組み込まれる、 ソースファイル内での文法係り受け定義関連の要点をレビューしました。
使ったanthyのソースはDebian BusterのベースとなるgniibeさんがUTF-8化パッチ を掛けかなり変更した0.3です。
anthy.depは、基本的にdepgraph/内のファイルから生成されます。
Anthyの文法係り受け定義 単文節内の、単語結合の遷移ルールが「接頭辞 自立語 接尾辞 付属語」 という順の結合で定義されるとして、以下の２段階ででデーターファイルを 読み込みanthy.depの中に書き出し文法係り受けルールを定義します。
付属語グラフを、init_depword_tab()が、付属語に関する日本語表現を使った結合ルールをall.depword から読み込みメモリー中に作成します。 自立語からの遷移表を、init_indep_word_seq_tab()が、indepword-wt.txtから自立語のソースの辞書内で用いる品詞ニモニック文字列と対応する日本語表現を読み込み作成します。 ここで、Anthyで言う付属語とは、活用語尾を含みます。
付属語グラフ 付属語ノードの結合ルールは、活用語尾や助詞や助動詞等のノードが一定の規則 にしたがって並んで、次のノードに遷移していくグラフ構造モデルです。
この付属語グラフを規程するために読み込まれるall.depwordは、 活用語尾を定義したconjugate.tableと助詞や助動詞等のノードを定義した*.depwordを、 sedでコメント行を除き結合して生成します。
このall.depwordは、基本的に
@ノード名 &amp;#34;そこに続く単語1&amp;#34; &amp;#34;そこに続く単語2&amp;#34; .. &amp;#34;..n&amp;#34; \ @遷移するノード名1 @遷移するノード名2 .. @遷移するノード名m という形式の行の繰り返しです。(読みやすいように折り返しましたが、 通常１行で記載します)
終端で次のノード名がない場合には、そこに@のみを遷移するノード名 として記します。
上記では、@遷移するノード名と典型的な場合をイメージした形式で記しま したが、実際にはもう少し多くの情報を盛り込めます。具体的には {遷移の属性}{接続の強さ}@ノードの名前という形式です。
遷移の属性は、depgraph/parse_transition()にあるtokenでswitchするcase分岐 構造のコードで扱われ、DOC/SPLITTERに説明されたアルファベット２文字の ニモニックです。ここにそれを内容をコードに揃えてアップデートし再録説明すると、
活用形 未然形 Cz (ct = CT_MIZEN) 連用形 Cy (ct = CT_RENYOU) 終止形 Cs (ct = CT_SYUSI) 連体形 Ct (ct = CT_RENTAI) 仮定形 Ck (ct = CT_KATEI) 命令形 Cm (ct = CT_MEIREI) 語幹形 Cg (ct = CT_HEAD) 自立語部の品詞 動詞 Hv (pos = POS_V) 名詞 Hn (pos = POS_NOUN) 形容詞 Hj (pos = POS_AJV) 文節の属性 名詞句?</description>
    </item>
    
    <item>
      <title>Anthyの辞書ファイル(1)</title>
      <link>/jp/2019/05/10/jpn-ime-resource-05/</link>
      <pubDate>Fri, 10 May 2019 00:00:00 +0000</pubDate>
      
      <guid>/jp/2019/05/10/jpn-ime-resource-05/</guid>
      <description>まず、辞書関連ファイルの要点をレビューしました。
使ったanthyのソースはDebian BusterのベースとなるgniibeさんがUTF-8化パッチ を掛けかなり変更した0.3です。
Anthyの辞書関連定義ソースファイル 変換候補漢字が、読みに対して、その品詞、頻度とともに定義される「辞書」ファイルは、 その作成経緯により2種類の拡張子が使われています。
Anthy用辞書: *.t Canna用辞書: *.ctd これらはすべてalt-cannadicとmkworddicにあります。
単純な品詞や頻度だけでは正しい漢字選択ができない場合に対応する「用例辞書」 ファイルudictはmkworddicにあります。
Anthyの辞書ソースファイル処理機構 上記の「辞書」ファイルと「用例辞書」ファイルは、mkworddicディレクトリー 中にビルド時に生成されるmkworddicにより読み込まれ、さらに負の頻度を持つ 「逆変換用辞書」データーが追加作成されます。
これを詳しく見ていきましょう。
mkworddicが-fオプションでdict.argsを指定して起動されます。dict.args は通常同一ディレクトリー内のdict.args.in`からビルド時作成されます。 これを変更することで組み込まれる辞書は調節できます。
dict.argsの設定内容の処理は、mkworddic/mkdic.c:execute_batch()で処理されます。
readコマンドは指定された「辞書」ファイルをread_dict_file()で読み込みます。 read_ucコマンドは指定された「用例辞書」ファイルをread_udict_file()で読み込みます。 build_reverse_dictコマンドは「逆変換用辞書」データーをbuild_reverse_dict()で作成し追加します。 writeコマンドはメモリー中の全辞書データーを指定されたファイル（anthy.wdic）にwrite_dict_file()で書き出します。 詳細は、mkworddicのソースをmkworddic/mkdic.cから追いかけると見えてきます。
ちなみに、anthy.wdicは、mkanthydic/ディレクトリーのファイルから生成するビルド 時用のバイナリープログラムmkfiledicにより、単語の条件付き連鎖発現頻度情報を整理 して生成する各種情報ファイルと統合され、漢字かな変換実行時に用いられるanthy.dic となります。
Anthyの辞書ソースファイル構造(基本) mkanthydic/mkdic.c:push_back_word_entry_line()からコードを読むと辞書ファイルの 構造が分かります。
最も典型的な辞書ソースデーターファイルの構造は、半角スペースで区切られた以下の 構造をしています。
&amp;lt;ひらがな見出し語&amp;gt; [#&amp;lt;品詞&amp;gt;[*&amp;lt;頻度&amp;gt;] [&amp;lt;変換後文字列&amp;gt;]... ]... &amp;lt;ひらがな見出し語&amp;gt; (index)は、全角ひらがな以外の半角・全角の数字や記号も許されます。 *&amp;lt;頻度&amp;gt;は省略可能です。 &amp;lt;変換後文字列&amp;gt;は同音異字に関して繰り返し羅列可能です。 #&amp;lt;品詞&amp;gt;*&amp;lt;頻度&amp;gt; [&amp;lt;変換後文字列&amp;gt;]... も繰り返し羅列可能です。 #&amp;lt;品詞&amp;gt;に関しては後述する。
ただし、現在は「&amp;lt;ひらがな見出し語&amp;gt;」は30文字までに制約されています。この他、 プログラム内の各種文字列長は固定長でいろいろ制約があることが多いので要注意です。
またindex中の濁点は通常「が」のように１文字表現をしますが、１文字表現の無い 「う゛」は２文字表記されています。
辞書中に「う゛」を「ヴ」で置き換えた項目を入れることはDebianが使っている 0.3のソース中ではされていません。現在のanthyの入力対応は、ひらがな・ カタカナ・ローマ字で、入力はひらがなに変換してから漢字変換操作がされるので、 「ヴ」は自動的に「う゛」となります。だからたとえ、フロントエンドがibusの 場合で「ヴ」をひらがなに混ぜて返す仕様となっていても問題は起こりません。 辞書中の「&amp;lt;ひらがな見出し語&amp;gt;」に「ヴ」を書くのを加えるのは 使われない無駄なデーターとなるので好ましくありません。（辞書ファイル中の README中の文言は無視しましょう）
src-main/main.c:need_reconvert() src-worddic/word_dic.c:anthy_get_seq_ent_from_xstr() このソース辞書から作られるanthy.dic辞書中の、素（raw）の「&amp;lt;頻度&amp;gt;」の 典型的値は以下です：
良く使われる言葉は大きく、５００ー６００程度 普通の言葉は、１００ー２００程度 単漢字などは、１０ー３０程度 指定が無い場合には、１ Anthyの辞書ソースファイル構造（複合語） 複合語の収録のために、「&amp;lt;変換後文字列&amp;gt;」には特別の記述法があります。</description>
    </item>
    
    <item>
      <title>日本語入力(anthy)関係リソース</title>
      <link>/jp/2019/05/05/jpn-ime-resource-01/</link>
      <pubDate>Sun, 05 May 2019 01:29:00 +0900</pubDate>
      
      <guid>/jp/2019/05/05/jpn-ime-resource-01/</guid>
      <description>anthy 関連のリソース（日本語中心） Original upstream https://ja.osdn.net/projects/anthy/ Easy to read mail archive https://www.mail-archive.com/anthy-dev@lists.sourceforge.jp/thrd1.html https://www.mail-archive.com/anthy-dev@lists.sourceforge.jp/thrd2.html https://www.mail-archive.com/anthy-dev@lists.sourceforge.jp/thrd3.html Debian (*****) wiki: http://wiki.debian.org/Teams/DebianAnthy salsa: https://salsa.debian.org/debian/anthy/tree/debian (current) salsa: https://salsa.debian.org/input-method-team/anthy (old) BTS: https://bugs.debian.org/cgi-bin/pkgreport.cgi?src=anthy G-HAL (engine patch) 2019-04-06: http://www.fenix.ne.jp/~G-HAL/soft/nosettle/im.html#anthy 2018-05-31: http://www.fenix.ne.jp/~G-HAL/whatsnew/20182nd.html#whatsnew2018530 2011-10-08: http://www.fenix.ne.jp/~G-HAL/soft/nosettle/anthy.html vagus (dictionary patch) 2012-03-10: http://vagus.seesaa.net/ https://osdn.net/projects/alt-cannadic/wiki/FrontPage ootnegx 2011-12-03: http://ootnegx.blogspot.com/2011/12/g-hal-anthy.html archlinux wiki 2018-08-30: https://wiki.archlinux.jp/index.php/Uim_%E3%82%92%E4%BD%BF%E3%81%A3%E3%81%A6%E6%97%A5%E6%9C%AC%E8%AA%9E%E3%82%92%E5%85%A5%E5%8A%9B#Anthy kakurasan 2010-11-20: https://kakurasan.hatenadiary.jp/entry/20101120/p1 2010-12-14: https://kakurasan.hatenadiary.jp/entry/20101214/p1 arekorebibouroku 2017-09-24 http://arekorebibouroku.hateblo.jp/entry/2017/09/24/171025 rikuku 2013-07-12: https://rikukuu.blog.fc2.com/blog-entry-199.html 2019-01-13: https://rikukuu.blog.fc2.com/blog-entry-640.html data: https://drive.google.com/file/d/1RW1mcYzbfp0dPfzFmnSme-duiGqYtzRb/view?usp=sharing Updated: 2019-05-22
日本語基礎知識 現代仮名遣い </description>
    </item>
    
    <item>
      <title>anthyのユーザー辞書</title>
      <link>/jp/2019/02/09/anthy-dict/</link>
      <pubDate>Sat, 09 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>/jp/2019/02/09/anthy-dict/</guid>
      <description>2019-05-11:加筆修正。
Anthyのソースを見るとメイン 辞書以外のユーザー辞書は、単漢字入力などの入力文字列として半角tを最後 につけた辞書が、ファイル名「*.t」で多数含まれ配布されています。
（もっとも、現在のDebianのソースは NIIBE Yutakaさんが最近再構成したので、 ファイルの起源はどうもalt-cannadicは由来かもしれません）
これらは個人用辞書用と言うことですが、現在（２０１９年２月）の時点では 「郵便番号→住所」変換をするためのzipcode.t以外はバイナリーパッケージに コピーされていないので直接システムに導入するようにはなっていません。
ただ同梱された「郵便番号→住所」変換をするための辞書は「７桁半角数字」 を入力すると郵便番号に対応する住所の文字列を吐き出すようになっているように 見受けます。&amp;ndash;&amp;gt; ７桁半角数字が変換されないように見えたのはDEBIANのバグでし た。 2019-05-06: Debian BTS
実際にanthyをibus-anthyの下で動作させると「７桁半角数字」を入れても何も起こりません。 ibus-anthyの下では、現在このzipcode.tは明らかに使えません。Busterは既にフリーズ中 なのでこの修正は次回リリースやバックポートで入るように提案していきます。
（zipcode.tは「t」で終わるトリックは使っていません。）
良く見るとibus-anthyが
/usr/share/ibus-anthy/dicts/emoji.t /usr/share/ibus-anthy/dicts/era.t /usr/share/ibus-anthy/dicts/oldchar.t /usr/share/ibus-anthy/dicts/symbol.t /usr/share/ibus-anthy/dicts/zipcode.t をインストールして、GUIの設定が「~/.anthy/*.t」からシムリンクをはるなど してこれらをibus-anthyのGUIでユーザー辞書として使えるようにしているようです。
ただこれらのユーザー辞書では、入力文字列として半角tを最後つけることはされて いません。「郵便番号→住所」変換をするための辞書は「３桁全角数字、 全角の長音(UTF-8=E383BC, Unicode=U+30FC)、４桁全角数字」を入力すると、 郵便番号に対応する住所の文字列を対応させるようになっていますし、実際の 動作もそうです。
どうもこの違いは、使うフロントエンドによって提供されるローマ字入力からかな に変換される際のルールが異なるので、ibusでは小文字のtが入れにくいことにある ようです。（「uim」は使っていないのであくまで推測です）
「ibus-anthy」 数字・記号入力は全角数字・記号、単ローマ字入力は大文字半角 「uim」 数字・記号入力は半角数字・記号、単ローマ字入力は小文字半角 ローマ字入力からのかな漢字変換は、どうも使うフロントエンドによって少々動作が 違うので要注意です。
そもそもこの変な小文字のtを末尾に入れる変換辞書スタイルは、 昔の「canna辞書」由来かもしれません。
2019-05-22: 上記メモを書いた後いろいろ試して、FREEZE中なのでDebianの experimentalにバグ修正版1:0.3-9をアップロードしています。７桁数字での 郵便番号はちゃんと出るようになりました。</description>
    </item>
    
  </channel>
</rss>
