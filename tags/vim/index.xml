<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>vim on Goofing Osamu</title>
    <link>/tags/vim/</link>
    <description>Recent content in vim on Goofing Osamu</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 04 Jun 2024 00:00:00 +0000</lastBuildDate><atom:link href="/tags/vim/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Re-learning Vim (8)</title>
      <link>/en/2024/06/04/vim-learn-8/</link>
      <pubDate>Tue, 04 Jun 2024 00:00:00 +0000</pubDate>
      
      <guid>/en/2024/06/04/vim-learn-8/</guid>
      <description>Nvim configuration retrospective I have been updating Nvim configuration with LazyVim as described in Re-learning Vim (7) to make it behave as close as plain Nvim.
I made further changes to my forked LazyVim starter.
Vim configuration touch-ups In order to make my Vim experience to match my LazyVim/Nvim configuration as much, I also updated my ~/.vimrc.
osamu&amp;rsquo;s ~/.vimrc file Folding of markdown file I have always used gq under visual line mode to rewrap range of lines within &#39;textwidth.</description>
    </item>
    
    <item>
      <title>Re-learning Vim (7)</title>
      <link>/en/2023/03/05/vim-learn-7/</link>
      <pubDate>Sun, 05 Mar 2023 00:00:01 +0000</pubDate>
      
      <guid>/en/2023/03/05/vim-learn-7/</guid>
      <description>Nvim configuration retrospective I have been updating Nvim configuration with AstroNvim as described in Re-learning Vim (5) and Re-learning Vim (6).
I also build the latest Nvim in Building Neovim to be compatible with the latest packages.
Although AstroNvim provided me with great features with simple and consistent customization mechanism, they were still a bit overwhelming and sometimes too much. I needed a simpler baseline Neovim configuration platform which offers most features as opt-in.</description>
    </item>
    
    <item>
      <title>Re-learning Vim (6)</title>
      <link>/en/2023/02/01/vim-learn-6/</link>
      <pubDate>Wed, 01 Feb 2023 00:00:00 +0000</pubDate>
      
      <guid>/en/2023/02/01/vim-learn-6/</guid>
      <description>AstroNvim v2.11.8 on the current main branch In order to update AstroNvim to the current main branch (which is also nightly branch), Neovim needed to be updated v0.8+. Since the official Debian package was stuck at v0.7, I installed the upstream provided deb package. See Debian BTS #1021339.
The following configuration was built on top of the configuration mentioned in Re-learning Vim (5).
Local customization I customized my Neovim with ~/.</description>
    </item>
    
    <item>
      <title>Re-learning Vim (5)</title>
      <link>/en/2022/07/29/vim-learn-5/</link>
      <pubDate>Fri, 29 Jul 2022 00:00:00 +0000</pubDate>
      
      <guid>/en/2022/07/29/vim-learn-5/</guid>
      <description>Revisit syntax checkers and beyond Let me revisit recent situation over static syntax checkers mentioned in Re-learning Vim (2).
Under NeoVim (&amp;gt;0.7) with Lua, LSP ecosystem around nvim-lspconfig can be used to access local syntax checkers and code style formatter using null-ls.nvim.
upstream: null-ls.nvim. Many required packages for this seem to be compiled and installed by
currently: nvim-lsp-installer (upstream: https://github.com/williamboman/nvim-lsp-installer) Next: mason.nvim (upstream: https://github.com/williamboman/mason.nvim) Shell with LS static syntax checker package: shellcheck (deb) upstream: shellcheck use configuration file: ~/.</description>
    </item>
    
    <item>
      <title>Re-learning Vim (4)</title>
      <link>/en/2022/07/15/vim-learn-4/</link>
      <pubDate>Fri, 15 Jul 2022 00:00:00 +0000</pubDate>
      
      <guid>/en/2022/07/15/vim-learn-4/</guid>
      <description>NOTE: As of 2022-12-23, I use NeoVim (v0.8.1 upstream deb) with AstroNvim (v2.10.1). Upstream of AstroNvim has included many things written below as a part of its official documentation and adopted new features proposed below.
Neovim 0.7 migration After short trial of Neovim (nvim) 0.5 described in Re-learning Vim (3), I went back to the good old Vim with ALE.
As I find out Neovim (nvim) 0.7 now has native LSP support and tools around it seems to be getting mature, I decided to check nvim with lua again.</description>
    </item>
    
    <item>
      <title>Re-learning Vim (3)</title>
      <link>/en/2021/09/12/vim-learn-3/</link>
      <pubDate>Sun, 12 Sep 2021 05:22:00 +0000</pubDate>
      
      <guid>/en/2021/09/12/vim-learn-3/</guid>
      <description>This page is here as my old memo and contents are outdated. See:
Re-learning Vim (1) Re-learning Vim (4) Neovim 0.5 migration After finding out Neovim (nvim) 0.5 starts up 30%-40% faster than Vim 8 probably due to asynchronous processing and more effective use of multi-core modern CPU, I decided to migrate to nvim. Then lua thing got my attention. Since nvim source package for version 0.5 was available in Debian experimental, I made a local package from it.</description>
    </item>
    
    <item>
      <title>Re-learning Vim (2)</title>
      <link>/en/2019/09/24/vim-learn-2/</link>
      <pubDate>Tue, 24 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>/en/2019/09/24/vim-learn-2/</guid>
      <description>This page is here as my old memo and contents are outdated. See:
Re-learning Vim (1) Re-learning Vim (4) Let&amp;rsquo;s review how I initialize Vim and use a few interesting packages.
Please note that I now manage package directly via the Vim 8&amp;rsquo;s native package management framework with packadd! without using so-called package managers.
Vim general settings (packages) As of 2021-09-02, I mostly use the latest version from github for some fancy fast developing packages but also use older mature packages from Debian vim-scripts package.</description>
    </item>
    
    <item>
      <title>Re-learning Vim (1)</title>
      <link>/en/2019/09/17/vim-learn-1/</link>
      <pubDate>Tue, 17 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>/en/2019/09/17/vim-learn-1/</guid>
      <description>I could use Vim as a basic editor with TKL-keyboard while tapping some keys multiple times. This was functional but not so elegant!
I decided to re-learn Vim to use it properly. Here is my learning memo.
For simplicity, I may use ^F to mean CTRL-F.
This page has been updated in 2022 since some basic summary is valid and common to neovim. See Re-learning Vim (4) to get the latest situation.</description>
    </item>
    
  </channel>
</rss>
