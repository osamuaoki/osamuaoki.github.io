<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>fun2prog on Goofing Osamu</title>
    <link>/tags/fun2prog/</link>
    <description>Recent content in fun2prog on Goofing Osamu</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 17 Aug 2013 00:00:58 +0900</lastBuildDate><atom:link href="/tags/fun2prog/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Fun to Program -- C Language</title>
      <link>/en/2013/08/17/fun2prog-clang/</link>
      <pubDate>Sat, 17 Aug 2013 00:00:58 +0900</pubDate>
      
      <guid>/en/2013/08/17/fun2prog-clang/</guid>
      <description>This was originally written and created around 2013 and may require to be updated. (2021)
 C Language Except for some functional languages such as Scheme, many procedual languages share quite a bit of similarities. C language is a good start in terms of its gramatical simplicity.
Program control sequence keywords
   C syntax meaning     expression; simple expression statement   {statement...} block statement   if (expression) statement conditional execution   if (expression) statement else statement conditional executions   switch (expression) {case const-express: {statement.</description>
    </item>
    
    <item>
      <title>Fun to Program -- Language basics</title>
      <link>/en/2013/08/17/fun2prog-languages/</link>
      <pubDate>Sat, 17 Aug 2013 00:00:57 +0900</pubDate>
      
      <guid>/en/2013/08/17/fun2prog-languages/</guid>
      <description>This was originally written and created around 2013 and may require to be updated. (2021)
 Language basics See Wikipedia article on programing language.
Please note this may be inaccurate.
 statement  ; as statement terminator: C, C++, Java, Vala, &amp;hellip; ; as statement separator: Perl, Pascal, PL/I, SQL, &amp;hellip; EOL as statement terminator: Python ; or EOL as statement terminator: Shell ; as NOP statement: Lua   block statement  { statement.</description>
    </item>
    
    <item>
      <title>Fun to Program -- Vim basics</title>
      <link>/en/2013/08/17/fun2prog-vim/</link>
      <pubDate>Sat, 17 Aug 2013 00:00:56 +0900</pubDate>
      
      <guid>/en/2013/08/17/fun2prog-vim/</guid>
      <description>This was originally written and created around 2013 and may require to be updated. (2021)
 Vim basics Learning and practice!
 vimtutor vim +help +only  ~/.vimrc as:
set nocompatible set nopaste set pastetoggle=&amp;lt;f2&amp;gt; set syntax=ON &amp;#34; Use secure modeline plug-in set nomodeline if $USER == &amp;#34;root&amp;#34; set noswapfile else set swapfile endif &amp;#34; filler to avoid the line above being recognized as a modeline &amp;#34; filler &amp;#34; filler  Learn additional basics:</description>
    </item>
    
    <item>
      <title>Fun to Program -- Utilities</title>
      <link>/en/2013/08/17/fun2prog-utilities/</link>
      <pubDate>Sat, 17 Aug 2013 00:00:55 +0900</pubDate>
      
      <guid>/en/2013/08/17/fun2prog-utilities/</guid>
      <description>This was originally written and created around 2013 and may require to be updated. (2021)
 Utilities Here is a list of basic utilities used for the programming.
You can find usage examples for the commands in this document if their lines are ending with *.
 POSIX shell (dash package) See Debain Reference GNU make (make package) See Debain Reference GNU C compiler (gcc package) *  See the gccintro package containing &amp;ldquo;Introduction to GCC by Brian J.</description>
    </item>
    
    <item>
      <title>Fun to Program -- Coding style</title>
      <link>/en/2013/08/17/fun2prog-coding-style/</link>
      <pubDate>Sat, 17 Aug 2013 00:00:54 +0900</pubDate>
      
      <guid>/en/2013/08/17/fun2prog-coding-style/</guid>
      <description>This was originally written and created around 2013 and may require to be updated. (2021)
 Coding style Follow the existing practice for the source.
Osamu&amp;rsquo;s preference at this moment is as follows:
 For this document, 4 spaces as much as possible for any codes &amp;hellip; C and alike: normally Linux-style hardtab. (ts=8 noet) Python: 4 spaces (The official indentation rule for Python, ts=4 sts=4 et) Other scripts: also 4 spaces or hardtab.</description>
    </item>
    
    <item>
      <title>Fun to Program -- System Statistics</title>
      <link>/en/2013/08/17/fun2prog-53/</link>
      <pubDate>Sat, 17 Aug 2013 00:00:53 +0900</pubDate>
      
      <guid>/en/2013/08/17/fun2prog-53/</guid>
      <description>This was originally written and created around 2013 and may require to be updated. (2021)
 System Statistics Executables Let&amp;rsquo;s check roughly what kind of executables are used on my typical GNOME desktop Debian system building this document.
Statistics over installed executable programs
   Executable type Number of programs     ELF executable (all) 2442   ELF executable (set*id) 37   ELF executable (linked to libc) 2350   ELF executable (linked to libstdc++ = C++) 361   ELF executable (linked to libX11 = X) 413   ELF executable (linked to gobject = GNOME) 329   ELF executable (linked to libQtCore = KDE) 101   ELF executable (linked to libncurses) 53   POSIX shell script 560   Perl script 508   Python script 240   Bash shell script 149   Ruby script 25   Lua script 1    ELF executable can be generated from any compiled languages such as C, C++, , Objective C, Objective C++, Vala, Common Lisp, Scheme, Haskel, Pascal, Fortran, Ada, &amp;hellip; but most likely they are from C or C++.</description>
    </item>
    
    <item>
      <title>Fun to Program -- Further readings</title>
      <link>/en/2013/08/17/fun2prog-readings/</link>
      <pubDate>Sat, 17 Aug 2013 00:00:52 +0900</pubDate>
      
      <guid>/en/2013/08/17/fun2prog-readings/</guid>
      <description>This was originally written and created around 2013 and may require to be updated. (2021)
 Further readings Here are some documentation I found on the web which may be interesting to read. (I have not yet examined all their contents yet.)
IBM developerWorks  IBM developerWorks Linux New to Linux programming and Linux system administration AIX and UNIX Technical library  Speaking UNIX This tutorial series by Martin Streicher (martin.</description>
    </item>
    
    <item>
      <title>Fun to Program -- Code examples</title>
      <link>/en/2013/08/17/fun2prog-code-examples/</link>
      <pubDate>Sat, 17 Aug 2013 00:00:51 +0900</pubDate>
      
      <guid>/en/2013/08/17/fun2prog-code-examples/</guid>
      <description>This was originally written and created around 2013 and may require to be updated. (2021)
 Code examples Here are code examples which I thought interesting.
Encrypted code Let&amp;rsquo;s make an obfuscated shell code by encrypting its real code contents. The following creates an encrypted ASCII file hello.asc (passphrase used was &amp;ldquo;secret&amp;rdquo;) from hello.
Encrypting hello shell script into hello.asc
$ cat ./hello #!/bin/sh # my first shell program echo &amp;#34;Hello, world!</description>
    </item>
    
    <item>
      <title>Fun to Program -- Embedded Lua</title>
      <link>/en/2013/08/17/fun2prog-lua/</link>
      <pubDate>Sat, 17 Aug 2013 00:00:50 +0900</pubDate>
      
      <guid>/en/2013/08/17/fun2prog-lua/</guid>
      <description>This was originally written and created around 2013 and may require to be updated. (2021)
 Embedded Lua The Lua interpreter embedded into a small C program offers an ideal configuration system. It can execute any functions of the hosting C program under specified conditions and sequences with arbitrary parameter values.
 Lua is small. Lua has simple procedural syntax. Lua has powerful data constructs based on associative arrays. Lua has extensible semantics.</description>
    </item>
    
    <item>
      <title>Fun to Program -- XML</title>
      <link>/en/2013/08/17/fun2prog-xml/</link>
      <pubDate>Sat, 17 Aug 2013 00:00:49 +0900</pubDate>
      
      <guid>/en/2013/08/17/fun2prog-xml/</guid>
      <description>This was originally written and created around 2013 and may require to be updated. (2021)
 XML XML is a representation of the textual data structure. For example, it is used for web pages (XHTML) and DocBook source files (DocBook).
The tag pair &amp;ldquo;&amp;lt;tag&amp;gt; ... &amp;lt;/tag&amp;gt;&amp;rdquo; or selfclosing tag &amp;ldquo;&amp;lt;tag /&amp;gt;&amp;rdquo; are used to markup the text data. This simple XML data structure allows to create its generic data processing tools such as XSLT, DOM, SAX, &amp;hellip; .</description>
    </item>
    
    <item>
      <title>Fun to Program -- SQLite</title>
      <link>/en/2013/08/17/fun2prog-sqlite/</link>
      <pubDate>Sat, 17 Aug 2013 00:00:48 +0900</pubDate>
      
      <guid>/en/2013/08/17/fun2prog-sqlite/</guid>
      <description>This was originally written and created around 2013 and may require to be updated. (2021)
 SQLite SQLite is a lightweight relational database management system suitable for embedding into the application program by linking the SQLite library. Structured Query Language (SQL) can be used to manage the content of the database.
SQL basics You can interactively input SQL commands to the command line after starting sqlite3 as:
$ sqlite3 test.</description>
    </item>
    
    <item>
      <title>Fun to Program -- GTK&#43; GUI program</title>
      <link>/en/2013/08/17/fun2prog-gtkgui/</link>
      <pubDate>Sat, 17 Aug 2013 00:00:47 +0900</pubDate>
      
      <guid>/en/2013/08/17/fun2prog-gtkgui/</guid>
      <description>This was originally written and created around 2013 and may require to be updated. (2021)
 GTK+ GUI programs Here are some pointers to example codes for GNOME GUI:
 Beginner Gtk+ Course (August 20, 2012) GNOME Developer Platform Demos (These are mostly empty templates as of 2012.)  Let me record my practice codes which create executables with the following same behaviour.
First it displays a small window as:</description>
    </item>
    
    <item>
      <title>Fun to Program -- Glib and GObject</title>
      <link>/en/2013/08/17/fun2prog-glib/</link>
      <pubDate>Sat, 17 Aug 2013 00:00:41 +0900</pubDate>
      
      <guid>/en/2013/08/17/fun2prog-glib/</guid>
      <description>This was originally written and created around 2013 and may require to be updated. (2021)
 Glib and GObject Dynamic memory management using malloc() etc. is a big headache when coding with C.:
 Virtual Memory Allocation And Paging in The GNU C Library manual C dynamic memory allocation (Wikipedia) mmap (Wikipedia)  Such complication can be avoided using libraries such as Glib and GObject.
GLib is a general-purpose utility library, which provides many useful data types, macros, type conversions, string utilities, file utilities, a mainloop abstraction, utility data structures, and so on.</description>
    </item>
    
    <item>
      <title>Fun to Program -- GNOME</title>
      <link>/en/2013/08/17/fun2prog-gnome/</link>
      <pubDate>Sat, 17 Aug 2013 00:00:40 +0900</pubDate>
      
      <guid>/en/2013/08/17/fun2prog-gnome/</guid>
      <description>This was originally written and created around 2013 and may require to be updated. (2021)
 GNOME The choice of the best GUI program practice is not simple since there are many choices for GUI platforms, many outdated documentations, new features without updated tutorials, and future uncertainties.
Despite people had very negative reaction to the GNOME3 due to its new default user experience, I chose it as my GUI example platform for its fundamental internal technical merits.</description>
    </item>
    
    <item>
      <title>Fun to Program -- Build system</title>
      <link>/en/2013/08/17/fun2prog-build/</link>
      <pubDate>Sat, 17 Aug 2013 00:00:39 +0900</pubDate>
      
      <guid>/en/2013/08/17/fun2prog-build/</guid>
      <description>This was originally written and created around 2013 and may require to be updated. (2021)
 Build system There are many cross-platform build systems:
 &amp;laquo;_autotools,Autotools&amp;raquo; for GNU, GNOME, generic C/C++/Vala/&amp;hellip; programs &amp;laquo;_cmake,CMake&amp;raquo; for KDE programs, etc. Python distutils for some Python programs  &amp;laquo;_install_python_source_distribution,Install Python source distribution&amp;raquo; (as a user) &amp;laquo;_generate_python_source_distribution,Generate Python source distribution&amp;raquo; (as an upstream)    Please note there are many programs which come with the plain GNU Make as the build system .</description>
    </item>
    
    <item>
      <title>Fun to Program -- Python program</title>
      <link>/en/2013/08/17/fun2prog-python/</link>
      <pubDate>Sat, 17 Aug 2013 00:00:38 +0900</pubDate>
      
      <guid>/en/2013/08/17/fun2prog-python/</guid>
      <description>This was originally written and created around 2013 and may require to be updated. (2021)
 Python program Python is a vary http://en.wikipedia.org/wiki/High-level_programming_language[high-level programming language] which offers features to support OOP. It is very well documented in the Python documentation web site.
Python frees us from chores of the memory management required by C and allows us to focus on the problem solving. Python module system allows us to organize codes in multiple files nicely and let us divide and conqueror bugs efficiently.</description>
    </item>
    
    <item>
      <title>Fun to Program -- Debug: level 4</title>
      <link>/en/2013/08/17/fun2prog-debug-4/</link>
      <pubDate>Sat, 17 Aug 2013 00:00:37 +0900</pubDate>
      
      <guid>/en/2013/08/17/fun2prog-debug-4/</guid>
      <description>This was originally written and created around 2013 and may require to be updated. (2021)
 Debug: level 4 Dynamically tracing program execution to understand the general behavior of the program is the major part of debugging.
There are several ways to trace programs interactively. The perf tool facilitate this without any modifications to the source.
perf The linux-tools-* package matching your running kernel provides the perf command on your system.</description>
    </item>
    
    <item>
      <title>Fun to Program -- Debug: level 3</title>
      <link>/en/2013/08/17/fun2prog-debug-3/</link>
      <pubDate>Sat, 17 Aug 2013 00:00:36 +0900</pubDate>
      
      <guid>/en/2013/08/17/fun2prog-debug-3/</guid>
      <description>This was originally written and created around 2013 and may require to be updated. (2021)
 Debug: level 3 The GNU debugger (GDB) make you look into binary programs.
If you do not mind reading the code in the assembler, no source code is required.
The GDB works even better if the program is compiled with the -g option and the source code is kept in place on the same machine after the compilation with the -g option.</description>
    </item>
    
    <item>
      <title>Fun to Program -- Debug: level 2</title>
      <link>/en/2013/08/17/fun2prog-debug-2/</link>
      <pubDate>Sat, 17 Aug 2013 00:00:35 +0900</pubDate>
      
      <guid>/en/2013/08/17/fun2prog-debug-2/</guid>
      <description>This was originally written and created around 2013 and may require to be updated. (2021)
 Debug: level 2 Tracing program execution to understand the general behavior of the program is the major part of debugging.
There are several ways to trace programs non-interactively without any modifications to the source.
strace This is very effective tools to investigate what a program does without reading its full source at the system calll level.</description>
    </item>
    
    <item>
      <title>Fun to Program -- Debug: level 1</title>
      <link>/en/2013/08/17/fun2prog-debug-1/</link>
      <pubDate>Sat, 17 Aug 2013 00:00:34 +0900</pubDate>
      
      <guid>/en/2013/08/17/fun2prog-debug-1/</guid>
      <description>This was originally written and created around 2013 and may require to be updated. (2021)
 Debug: level 1 Debugging is the major part of programing.
If your code fails by an unknown cause, it is primitive but is often used technique to embed logging codes for key internal parameters. This logging must be disabled for the normal program execution.
TIP: Use the script(1) command to obtain a file copy of the console output.</description>
    </item>
    
    <item>
      <title>Fun to Program -- ELF</title>
      <link>/en/2013/08/17/fun2prog-elf/</link>
      <pubDate>Sat, 17 Aug 2013 00:00:33 +0900</pubDate>
      
      <guid>/en/2013/08/17/fun2prog-elf/</guid>
      <description>This was originally written and created around 2013 and may require to be updated. (2021)
 ELF In this chapter, I will play with ELF files generated from the same hello.c program file as the one in the &amp;laquo;_c,Hello World: C&amp;raquo; with the debug information to learn how it works.
See the following for the he ELF:
 The wikipedia: ELF The man page elf(5). Linkers and Loaders (draft) for their mechanism.</description>
    </item>
    
    <item>
      <title>Fun to Program -- Library</title>
      <link>/en/2013/08/17/fun2prog-32/</link>
      <pubDate>Sat, 17 Aug 2013 00:00:32 +0900</pubDate>
      
      <guid>/en/2013/08/17/fun2prog-32/</guid>
      <description>This was originally written and created around 2013 and may require to be updated. (2021)
 Library Static and dynamic libraries Compiling source while stopping at object file can be done with the -c option. You can bunch such object files into a single archive/object. This is called library.
 static library: libfoo.a  simple archive of object files (*.o) as &amp;ldquo;ar rcs libfoo.a *.o&amp;rdquo; *.a may be used just like bunch of *.</description>
    </item>
    
    <item>
      <title>Fun to Program -- GCC</title>
      <link>/en/2013/08/17/fun2prog-gcc/</link>
      <pubDate>Sat, 17 Aug 2013 00:00:31 +0900</pubDate>
      
      <guid>/en/2013/08/17/fun2prog-gcc/</guid>
      <description>This was originally written and created around 2013 and may require to be updated. (2021)
 GCC The gccintro package provides a good tutorial &amp;ldquo;Introduction to GCC by Brian J. Gough&amp;rdquo; for the GCC basics to compile C programs.
GCC version Check gcc version and defaults:
$ gcc -v Using built-in specs. COLLECT_GCC=gcc COLLECT_LTO_WRAPPER=/usr/lib/gcc/x86_64-linux-gnu/4.8/lto-wrapper Target: x86_64-linux-gnu Configured with: ../src/configure -v --with-pkgversion=&amp;#39;Debian 4.8.1-9&amp;#39; --with-bu... Thread model: posix gcc version 4.8.1 (Debian 4.</description>
    </item>
    
    <item>
      <title>Fun to Program -- Process</title>
      <link>/en/2013/08/17/fun2prog-process/</link>
      <pubDate>Sat, 17 Aug 2013 00:00:30 +0900</pubDate>
      
      <guid>/en/2013/08/17/fun2prog-process/</guid>
      <description>This was originally written and created around 2013 and may require to be updated. (2021)
 Process Here are some practice results to play with process and inter process communication (IPC) (signal and network socket) on Debian wheezy.
Signal Signal is explained in signal(7).
Here are default actions for notable signals.
 Default action is to terminate the process.  SIGHUP = 1 : Death of controlling process SIGINT = 2 : Interrupt from keyboard (Ctrl-C) SIGKILL = 9 : Kill signal (non-trappable) SIGALRM = 14 : Timer signal from alarm(2) SIGTERM = 15 : Termination signal (default for kill) SIGUSR1 = 10 : User-defined signal 1 SIGUSR2 = 12 : User-defined signal 2   Default action is to terminate the process and dump core.</description>
    </item>
    
    <item>
      <title>Fun to Program -- Prime numbers</title>
      <link>/en/2013/08/17/fun2prog-prime/</link>
      <pubDate>Sat, 17 Aug 2013 00:00:29 +0900</pubDate>
      
      <guid>/en/2013/08/17/fun2prog-prime/</guid>
      <description>This was originally written and created around 2013 and may require to be updated. (2021)
 Prime numbers A prime number (or a prime) is a natural number greater than 1 that has no positive divisors other than 1 and itself.
Let&amp;rsquo;s check simple code snippets to obtain prime numbers via the same trial division algorithm implemented in different languages to study the following:
 basic for-loop syntax relative execution speed  Please note this algorithm to obtain prime numbers is not the best one.</description>
    </item>
    
    <item>
      <title>Fun to Program -- Fibonacci numbers</title>
      <link>/en/2013/08/17/fun2prog-fibo/</link>
      <pubDate>Sat, 17 Aug 2013 00:00:28 +0900</pubDate>
      
      <guid>/en/2013/08/17/fun2prog-fibo/</guid>
      <description>This was originally written and created around 2013 and may require to be updated. (2021)
 Fibonacci numbers The Fibonacci numbers are a sequence of integers, starting with 0, 1 and continuing 1, 2, 3, 5, 8, 13, &amp;hellip;, each new number being the sum of the previous two.
Let&amp;rsquo;s check simple code snippets to obtain Fibonacci numbers implemented in different languages to study the following:
 basic while-loop syntax integer overflow behavior  Shell Before we start, let&amp;rsquo;s check the integer overflow behavior of the shell on the 64-bit GNU/Linux platform.</description>
    </item>
    
    <item>
      <title>Fun to Program -- CLI programs</title>
      <link>/en/2013/08/17/fun2prog-cli/</link>
      <pubDate>Sat, 17 Aug 2013 00:00:27 +0900</pubDate>
      
      <guid>/en/2013/08/17/fun2prog-cli/</guid>
      <description>This was originally written and created around 2013 and may require to be updated. (2021)
 CLI programs The command line interface (CLI) program requires to parse its command line arguments. Here are simple example code snippets.
Please note I chose the coding style which is the most legible for each language. I know there are other ways &amp;hellip;
Shell Shell script (short option only) Shell program with short command line options.</description>
    </item>
    
    <item>
      <title>Fun to Program -- Hello World!</title>
      <link>/en/2013/08/17/fun2prog-hello/</link>
      <pubDate>Sat, 17 Aug 2013 00:00:26 +0900</pubDate>
      
      <guid>/en/2013/08/17/fun2prog-hello/</guid>
      <description>This was originally written and created around 2013 and may require to be updated. (2021)
 &amp;ldquo;Hello World!&amp;rdquo; Here are example code snippets to print &amp;ldquo;Hello World!&amp;rdquo; and somethings we should be aware of for each language.
Shell The most basic programing language: Shell.
 Interpreter (slow) Easy to write a small program. Not easy to write a big program. Test code snippet under the normal console (or by &amp;ldquo;sh -i&amp;quot;).</description>
    </item>
    
    <item>
      <title>Fun to Program -- Opening</title>
      <link>/en/2013/08/17/fun2prog-open/</link>
      <pubDate>Sat, 17 Aug 2013 00:00:24 +0900</pubDate>
      
      <guid>/en/2013/08/17/fun2prog-open/</guid>
      <description>This was originally written and created around 2013 and may require to be updated. (2021)
 This &amp;ldquo;Fun to Program&amp;rdquo; was originally created around 2013 when I was learning programming on Debian system and was published to http://people.debian.org/~osamu/fun2prog.html .
Since this has been neglected and I thought it is good idea to go through this content again. I moved this content to the currently maintained site https://osamuaoki.github.io/ in 2021.</description>
    </item>
    
  </channel>
</rss>
