<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Python on Goofing Osamu</title>
    <link>/tags/python/</link>
    <description>Recent content in Python on Goofing Osamu</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 21 Aug 2025 23:49:57 +0900</lastBuildDate>
    <atom:link href="/tags/python/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>python polib</title>
      <link>/en/2025/04/24/python3-polib/</link>
      <pubDate>Thu, 24 Apr 2025 00:00:00 +0000</pubDate>
      <guid>/en/2025/04/24/python3-polib/</guid>
      <description>PO file handling with Python Instead of using adhoc parser for processing PO file, I decided to use the established polib library.&#xA;project site: polib document: Quick start guide Debian package: python3-polib This is available as bin/xmlpo in the debian-reference source package. to make some sanity checks.</description>
    </item>
    <item>
      <title>python pipy.org and pyproject.toml</title>
      <link>/en/2024/02/03/python-pypi/</link>
      <pubDate>Sat, 03 Feb 2024 00:00:00 +0000</pubDate>
      <guid>/en/2024/02/03/python-pypi/</guid>
      <description>I realized the main stream packaging practice now uses pyproject.toml instead of setup.cfg or setup.py.&#xA;I wanted to upload a package imediff to pipy.org repository while converting it to use pyproject.toml. Getting confused by the documentation sites which are still actively updated to catch up with the new style to use pyproject.toml etc., I managed to upload a package to pypi.org.&#xA;Here are the list of sites which I visited:</description>
    </item>
    <item>
      <title>python venv</title>
      <link>/en/2024/02/02/python-venv/</link>
      <pubDate>Fri, 02 Feb 2024 00:00:00 +0000</pubDate>
      <guid>/en/2024/02/02/python-venv/</guid>
      <description>Python virtual environment I finally get to use python virtual environment using venv module to be created under ~/.venv/. (I wanted to upload a package to pypi.org)&#xA;$ apt install python3-pip twine ... $ python3 -m venv ~/.venv $ source ~/.venv/bin/activate (.venv) $ install --upgrade pip ... (.venv) $ install --upgrade twine ... (.venv) $ deactivate System packages were current enough to cause printing Found existing installation: pip 23.0.1, etc. and no new packages were installed in ~/.</description>
    </item>
    <item>
      <title>GTK GUI with PyGObject (10)</title>
      <link>/en/2021/07/23/pygi-a/</link>
      <pubDate>Fri, 23 Jul 2021 00:00:00 +0000</pubDate>
      <guid>/en/2021/07/23/pygi-a/</guid>
      <description>Note on recent change of environment for GUI design Since the computer monitor screen has changed fro VGA (4:3) to HDTV (16:9), screen got wider. In other word, we have relatively less vertical space for the computer monitor screen.&#xA;Now cellphones and tablets are powerful enough to use previously Desktop only general purpose programs. Go the GUI need to handle touch events.&#xA;Lastly, X11 is not the only GUI target. Wayland and browser needs to be addressed.</description>
    </item>
    <item>
      <title>GTK GUI with PyGObject (9)</title>
      <link>/en/2021/07/22/pygi-9/</link>
      <pubDate>Thu, 22 Jul 2021 00:00:00 +0000</pubDate>
      <guid>/en/2021/07/22/pygi-9/</guid>
      <description>FYI: If the buggy Glade v=3.38.2 is patched, the complicated manual process is not needed.&#xA;Client-side decoration with GtkHeaderbar using Glade Let&amp;rsquo;s consider to add client-side decorated GtkHeaderBar and to put primary menu with GtkPopover.&#xA;This may not be easy with Glade 3.38.2 on upcoming Debian Bullseye 11 since it is buggy. I created a note on my workaround at the end of this page&#xA;Let&amp;rsquo;s assume Glade is fixed by my patch or any other means and let&amp;rsquo;s use Glade to design GUI.</description>
    </item>
    <item>
      <title>GTK GUI with PyGObject (8)</title>
      <link>/en/2021/07/21/pygi-8/</link>
      <pubDate>Wed, 21 Jul 2021 00:00:00 +0900</pubDate>
      <guid>/en/2021/07/21/pygi-8/</guid>
      <description>Example: Multiline Text Editor with GtkSource.View Next exercise is to create a modal dialog window with Glade similar to Multiline Text Editor&#xA;Doing this with the Gtk.TextView widget is not so challenging. I decided to use GtkSource.View instead to gain access to capability of regex and case sensitivity.&#xA;I didn&amp;rsquo;t see GtkSource.View related widgets in the Glade&amp;rsquo;s available choice list, I first created Multiline Text Editor with Gtk.TextView just to get the general design done.</description>
    </item>
    <item>
      <title>GTK GUI with PyGObject (7)</title>
      <link>/en/2021/07/19/pygi-7/</link>
      <pubDate>Mon, 19 Jul 2021 00:00:05 +0900</pubDate>
      <guid>/en/2021/07/19/pygi-7/</guid>
      <description>Example: GtkIconView Let&amp;rsquo;s go through another notable widget GtkIconView.&#xA;Let&amp;rsquo;s create icon-view.py/icon-view.ui example. It took me a while to make these working since existing examples usually don&amp;rsquo;t use Glade nor Gtk.Template.&#xA;This is very much like GtkTreeView example.&#xA;icon-view.py: import gi gi.require_version(&amp;#34;Gtk&amp;#34;, &amp;#34;3.0&amp;#34;) from gi.repository import Gtk from gi.repository.GdkPixbuf import Pixbuf @Gtk.Template(filename=&amp;#34;icon-view.ui&amp;#34;) class SimpleWindow(Gtk.Window): # corresponding name in XML &amp;#39;class&amp;#39; attribute for this class __gtype_name__ = &amp;#34;icon-views&amp;#34; # corresponding name in XML &amp;#39;id&amp;#39; attribute sets this class member variable liststore1 = Gtk.</description>
    </item>
    <item>
      <title>GTK GUI with PyGObject (6)</title>
      <link>/en/2021/07/19/pygi-6/</link>
      <pubDate>Mon, 19 Jul 2021 00:00:00 +0900</pubDate>
      <guid>/en/2021/07/19/pygi-6/</guid>
      <description>GtkComboBox and GtkComboBoxText GtkComboBox under the &amp;ldquo;Control&amp;rdquo; button GtkComboBoxText under the &amp;ldquo;Cotrol&amp;rdquo; button A GtkComboBox is a widget that allows the user to choose from a list of valid choices offered in Gtk.TreeModel.&#xA;GtkComboBoxText is for the simpler text-only case of GtkComboBox.&#xA;For these let&amp;rsquo;s create combo-box.py/combo-box.ui and combo-box-text.py/combo-box-text.ui examples and compare them. It took me a while to make these working since existing examples usually don&amp;rsquo;t use Glade nor Gtk.</description>
    </item>
    <item>
      <title>GTK GUI with PyGObject (5)</title>
      <link>/en/2021/07/18/pygi-5/</link>
      <pubDate>Sun, 18 Jul 2021 00:00:00 +0000</pubDate>
      <guid>/en/2021/07/18/pygi-5/</guid>
      <description>GtkListBox and GtkFlowBox GtkListBox under the &amp;ldquo;Containers&amp;rdquo; button GtkFlowBox under the &amp;ldquo;Containers&amp;rdquo; button These are like Gtk.Box and Gtk.Grid but its contents can by dynamically sorted and filtered.&#xA;The children of these are Gtk.ListBoxRow and Gtk.FlowBoxChild respectively and these can be fairly complex. If the content of these are simple enough, use of Gtk.TreeView and Gtk.IconView may save your efforts.&#xA;GtkTreeView Although Gtk.TreeView was mentioned as a simpler tool to use than Gtk.</description>
    </item>
    <item>
      <title>GTK GUI with PyGObject (4)</title>
      <link>/en/2021/07/17/pygi-4/</link>
      <pubDate>Sat, 17 Jul 2021 00:00:00 +0000</pubDate>
      <guid>/en/2021/07/17/pygi-4/</guid>
      <description>GtkNotebook and GtkStack GtkNotebook under the &amp;ldquo;Containers&amp;rdquo; button GtkStack under the &amp;ldquo;Containers&amp;rdquo; button These are very similar displaying a selected page out of stacked pages.&#xA;For GtkNotebook, functionality to select page is automatically provided.&#xA;For GtkStack, functionality to select page needs external &amp;ldquo;control&amp;rdquo; widget and it needs to be specified in the property of the GtkStack widget. Such external &amp;ldquo;control&amp;rdquo; widget can be:&#xA;GtkStackSwitcher under the &amp;ldquo;Control&amp;rdquo; button (horizontal/vertical list) GtkStackSidebar under the &amp;ldquo;Control&amp;rdquo; button (vertical list) </description>
    </item>
    <item>
      <title>GTK GUI with PyGObject (3)</title>
      <link>/en/2021/07/16/pygi-3/</link>
      <pubDate>Fri, 16 Jul 2021 00:00:00 +0000</pubDate>
      <guid>/en/2021/07/16/pygi-3/</guid>
      <description>Example: Special button widgets into GUI To put more widgets,&amp;ldquo;Number of items&amp;rdquo; on the left panel of GtkBox was incremented. Some box are further subdivided again with GtkBox with their &amp;ldquo;Orientation&amp;rdquo; settings set to &amp;ldquo;Horizontal&amp;rdquo; instead.&#xA;Then I placed several additional simple &amp;ldquo;Control&amp;rdquo; widgets:&#xA;GtkSpinButton under the &amp;ldquo;Control&amp;rdquo; button GtkToggleButton under the &amp;ldquo;Control&amp;rdquo; button GtkCheckButton under the &amp;ldquo;Control&amp;rdquo; button GtkRadioButton under the &amp;ldquo;Control&amp;rdquo; button GtkFileChooserButton under the &amp;ldquo;Control&amp;rdquo; button Please note I created multiple widgets to learn how they work together with the object.</description>
    </item>
    <item>
      <title>GTK GUI with PyGObject (2)</title>
      <link>/en/2021/07/13/pygi-2/</link>
      <pubDate>Tue, 13 Jul 2021 00:00:00 +0000</pubDate>
      <guid>/en/2021/07/13/pygi-2/</guid>
      <description>Example: Static simple widgets into GUI Dividing area into smaller subdivided areas are mostly done by GtkBox or GtkGrid under the &amp;ldquo;Containers&amp;rdquo; button.&#xA;As a starter, I put GtkBox.&#xA;Then I placed 2 simple &amp;ldquo;Control&amp;rdquo; widgets and a simple GtkLabel &amp;ldquo;Display&amp;rdquo; widget as an easy starter:&#xA;GtkButton under the &amp;ldquo;Control&amp;rdquo; button GtkEntry under the &amp;ldquo;Control&amp;rdquo; button GtkLabel under the &amp;ldquo;Display&amp;rdquo; button I set IDs for these widgets basically by dropping &amp;ldquo;Gtk&amp;rdquo; from the GTk class names.</description>
    </item>
    <item>
      <title>GTK GUI with PyGObject (1)</title>
      <link>/en/2021/07/12/pygi-1/</link>
      <pubDate>Mon, 12 Jul 2021 00:00:00 +0000</pubDate>
      <guid>/en/2021/07/12/pygi-1/</guid>
      <description>Now that GTK4 is used in Debian/Bookworm in 2023, this section is getting outdated. The followings may be interesting to read:&#xA;https://github.com/Taiko2k/GTK4PythonTutorial https://amolenaar.github.io/pgi-docgen/#Gtk-4.0 My objective here is to learn efficient GUI programming with Glade and Python using Gtk.Builder class instead of calling widget classes directly and using decorators offered by Gtk.Templates.&#xA;I only touch on essential concepts in the order of practical importance and skip trivial points and points already addressed in The Python GTK+ 3 Tutorial.</description>
    </item>
    <item>
      <title>Python環境とパッケージ作成</title>
      <link>/jp/2021/06/17/python-package/</link>
      <pubDate>Thu, 17 Jun 2021 00:00:00 +0000</pubDate>
      <guid>/jp/2021/06/17/python-package/</guid>
      <description>Pythonで書かれたプログラム管理は、Debian供給のdebパッケージを使う限り、 普通にAPTで管理するだけなので簡単です。&#xA;一方、ソースからの導入などを考え出すと、Pythonのモジュール管理の変遷もあり結構ややこしいので、ここで復習します。&#xA;Python のパッケージの導入 Debian供給のdebパッケージ以外からの導入の基本ルールは、 OS環境をコンタミしないようにするのが賢明です。&#xA;具体的には、ソースからバイナリパッケージのwheelを作成しての導入の場合や、 外部レポジトリーのPython Package Indexからの導入の場合のともに、 仮想環境(7) の手法を使って導入という流れです。&#xA;Python関連のPython Packaging User Guideからリンクされた サイトの公式マニュアルにある、python3 -m pip install --upgrade pip setuptools wheel 等のコマンドを、安定版システムで漫然と通常のシェルから実行すると最新版が導入され、 その後のシェル環境からはこちらが優先され実行されるようになり、 干渉するかもしれないので要注意です。&#xA;pipをpipxとすれば良いだけですが、気をつけたいところです．&#xA;Python のパッケージの作成 また、モジュールパッケージを導入する際に、昔の基本の distutils を使おうとすると、最近はマニュアルにLegacy等と書いてあるので 不安になります。当時は、python3 setup.py install ...等として いきなりターゲットディレクトリーに書き込みモジュールパッケージを導入 していました。&#xA;現在はPython Packaging Authorityのルールに合致させ Python Package Indexにアップロード出きるようにするには、 distutilsではなく 殆ど変わらない使い勝手のsetuptoolsと 合わせてwheelを用い、setup.pyを作成すれば、 python3 setup.py bdist_wheel等としてwheel形式でのモジュールパッケージ 出力が難なくできます。&#xA;wheel形式でのモジュールパッケージはpipで 扱えます。&#xA;ちなみに、distributeは、 setuptoolsにマージされたとか、 setuptoolsが以前使っていた easy_install は非推薦ツールとなり、wheel形式でモジュールパッケージを作成し pipでモジュールパッケージを導入するようになったという、 過去の経緯を理解しないといろんな手法の立ち位置がわかりにくいです。&#xA;wheel形式とは、その実体はクロスプラットフォームで一番使われる アーカイブ形式のZIPファイルです。&#xA;さらに最近のPEP517に準拠させるには、 別のパッケージ作成インフラを使おうとしないなら、単に PEP518準拠の、 以下のpyproject.tomlを加えれば充分です。&#xA;[build-system] requires = [ &amp;#34;setuptools&amp;gt;=42&amp;#34;, &amp;#34;wheel&amp;#34; ] build-backend = &amp;#34;setuptools.</description>
    </item>
    <item>
      <title>仮想環境(7)</title>
      <link>/jp/2021/06/17/virt-07/</link>
      <pubDate>Thu, 17 Jun 2021 00:00:00 +0000</pubDate>
      <guid>/jp/2021/06/17/virt-07/</guid>
      <description>コンテナ技術を用いる仮想環境利用の考察 コンテナ技術を用いる仮想環境は、外部から導入するバイナリーを実行する 際のリスク低減とメインのシステムの環境コンタミを防ぐのには悪くないので しょう。そういった意味でtesting環境では安定しないオフィス関係のデスク トップアプリの安定版最新バージョンの導入や、Debianがまだ提供していない アップストリームの最新バージョンのアプリ導入に使うのはありがも知れません。&#xA;AppImage Flatpack Snapcraft ただ、単にパッケージ開発やビルド環境のためだけならLXC仮想環境をLXCの CLIから用いるのは面倒です。&#xA;最初の、仮想環境(1) の内容を見直してsbuild/schrootを経由した単純なchroot環境を使うようになり 益々そう感じます。&#xA;chrootにせよLXCにせよKernel以外のシステム全体のコピーを各環境毎に確保する ので重いことは否めません。&#xA;Python: venv + pip (manual) Debianが提供しなくなったgripを、 PyPIからのPythonのモジュールとしてpipで導入すると、 すでにシステムに導入済みのPythonのモジュールまで、sudoしなかったので システムレベルでの/usr/local/の中への変更は無く、ユーザー環境の ~/.local/の中への変更のみとはいえ、そこに最新版を依存関係で導入したり するのが気になっていました。さすがにこれだけのためにchrootやコンテナ環境 を作るのは重いのでPython環境だけを仮想化しました。&#xA;gripをPython環境だけを仮想化して導入した ので、以下に例示します。&#xA;$ pip list --user いま、ユーザー環境へのpipによるパッケージ導入はありません。&#xA;$ cd ~/bin $ python3 -m venv venv $ cd venv $ source venv/bin/activate (venv) $ pip install grip Collecting grip Using cached grip-4.5.2-py3-none-any.whl Collecting requests&amp;gt;=2.4.1 Using cached requests-2.25.1-py2.py3-none-any.whl (61 kB) Collecting path-and-address&amp;gt;=2.0.1 Using cached path_and_address-2.</description>
    </item>
    <item>
      <title>python3 formatting with black</title>
      <link>/en/2019/09/02/python3-black/</link>
      <pubDate>Mon, 02 Sep 2019 00:00:00 +0000</pubDate>
      <guid>/en/2019/09/02/python3-black/</guid>
      <description>I see formatting consistency provided by the black command helps me.&#xA;The black is available as Debian package and its upstream is at https://github.com/psf/black&#xA;Lint tools before black These are basic lint tools before black.&#xA;pycodestyle (formerly called pep8) flake8 (bundle of: pycodestyle + pyflakes). Install black $ sudo apt install python3-black Use black $ black a-python-code-directory/ or&#xA;$ black a-python-code-file.py Skip Lint prigram Line with #NOQA at the end are skipped by pycodestyle for PEP-8 lint.</description>
    </item>
  </channel>
</rss>
