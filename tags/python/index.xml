<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>python on Goofing Osamu</title>
    <link>/tags/python/</link>
    <description>Recent content in python on Goofing Osamu</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 17 Jun 2021 00:00:00 +0000</lastBuildDate><atom:link href="/tags/python/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Pythonパッケージ</title>
      <link>/jp/2021/06/17/python-package/</link>
      <pubDate>Thu, 17 Jun 2021 00:00:00 +0000</pubDate>
      
      <guid>/jp/2021/06/17/python-package/</guid>
      <description>Pythonで書かれたプログラム管理は、Debian供給のdebパッケージを使う限り、単純にAPTで管理するだけなので簡単です。
一方、ソースからの導入などを考え出すと、Pythonのモジュール管理の変遷もあり結構ややこしいので、ここで復習します。
Python のパッケージの導入 Debian供給のdebパッケージ以外からの導入の基本ルールは、 ソースからバイナリパッケージのwheelを作成しての導入の場合や、 外部レポジトリーのPython Package Indexからの導入の場合ともに、 仮想環境(7) の様に、python3 -m venv ...を使って作成した環境の中へ pipを使って導入という流れです。
Python関連のPython Packaging User Guideからリンクされた サイトにある、python3 -m pip install --upgrade pip setuptools wheel 等のコマンドを安定版システムで漫然と通常のシェルから実行すると最新版が導入され、 その後のシェル環境からはこちらが優先され実行されるようになり、 干渉するかもしれないので要注意です。
Python のパッケージの作成 また、モジュールパッケージを導入する際に、基本のはずの distutils を使おうとすると、最近はマニュアルにLegacy等と書いてあるので 不安になります。当時は、python3 setup.py install ...等として いきなりターゲットディレクトリーに書き込みモジュールパッケージを導入 していました。
現在はPython Packaging Authorityのルールに合致させ Python Package Indexにアップロード出きるようにするには、 distutilsではなく 殆ど変わらない使い勝手のsetuptoolsと wheelを用い、setup.pyを作成すれば、 python3 setup.py bdist_wheel等としてwheel形式でのモジュールパッケージ 出力が難なくできます。
さらに最近のPEP517に準拠させるには、 別のパッケージ作成インフラを使おうとしないなら、単に PEP518準拠の、 以下のpyproject.tomlを加えれば充分です。
[build-system] requires = [ &amp;quot;setuptools&amp;gt;=42&amp;quot;, &amp;quot;wheel&amp;quot; ] build-backend = &amp;quot;setuptools.build_meta&amp;quot; ちなみに、Bullseye環境は以下のバージョンですので余裕です。
ii python3-build 0.</description>
    </item>
    
    <item>
      <title>仮想環境(7)</title>
      <link>/jp/2021/06/17/virt-07/</link>
      <pubDate>Thu, 17 Jun 2021 00:00:00 +0000</pubDate>
      
      <guid>/jp/2021/06/17/virt-07/</guid>
      <description>コンテナ技術を用いる仮想環境は、外部から導入するバイナリーを実行する 際のリスク低減とメインのシステムの環境コンタミを防ぐのには悪くないので しょう。そういった意味でtesting環境では安定しないオフィス関係のデスク トップアプリの安定版最新バージョンの導入や、Debianがまだ提供していない アップストリームの最新バージョンのアプリ導入に使うのはありがも知れません。
 AppImage Flatpack Snapcraft  ただ、単にパッケージ開発やビルド環境のためだけならLXC仮想環境をLXCの CLIから用いるのは面倒です。
最初の、仮想環境(1) の内容を見直してsbuild/schrootを経由した単純なchroot環境を使うようになり 益々そう感じます。
chrootにせよLXCにせよKernel以外のシステム全体のコピーを各環境毎に確保する ので重いことは否めません。
Debianが提供しなくなったgripを、 PyPIからのPythonのモジュールとしてpipで導入すると、 すでにシステムに導入済みのPythonのモジュールまで、sudoしなかったので システムレベルでの/usr/local/の中への変更は無く、ユーザー環境の ~/.local/の中への変更のみとはいえ、そこに最新版を依存関係で導入したり するのが気になっていました。さすがにこれだけのためにchrootやコンテナ環境 を作るのは重いのでPython環境だけを仮想化しました。
Python: venv gripをPython環境だけを仮想化して導入した ので、以下に例示します。
$ pip list --user いま、ユーザー環境へのpipによるパッケージ導入はありません。
$ cd ~/bin $ python3 -m venv venv $ cd venv $ source venv/bin/activate (venv) $ pip install grip Collecting grip Using cached grip-4.5.2-py3-none-any.whl Collecting requests&amp;gt;=2.4.1 Using cached requests-2.25.1-py2.py3-none-any.whl (61 kB) Collecting path-and-address&amp;gt;=2.0.1 Using cached path_and_address-2.0.1-py3-none-any.whl Collecting Markdown&amp;gt;=2.</description>
    </item>
    
    <item>
      <title>python3 formatting with black</title>
      <link>/en/2019/09/02/python3-black/</link>
      <pubDate>Mon, 02 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>/en/2019/09/02/python3-black/</guid>
      <description>I see formatting consistency provided by the black command helps me.
The black is available as Debian package and its upstream is at https://github.com/psf/black
Lint tools before black These are basic lint tools before black.
 pycodestyle (formerly called pep8) flake8 (bundle of: pycodestyle + pyflakes).  Install black  $ sudo apt install python3-black Use black  $ black a-python-code-directory/ or
 $ black a-python-code-file.py Skip Lint prigram Line with #NOQA at the end are skipped by pycodestyle for PEP-8 lint.</description>
    </item>
    
  </channel>
</rss>
