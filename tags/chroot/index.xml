<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>chroot on Goofing Osamu</title>
    <link>/tags/chroot/</link>
    <description>Recent content in chroot on Goofing Osamu</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 13 Dec 2020 00:00:00 +0000</lastBuildDate><atom:link href="/tags/chroot/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>仮想環境(1)</title>
      <link>/jp/2020/12/13/virt-01/</link>
      <pubDate>Sun, 13 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>/jp/2020/12/13/virt-01/</guid>
      <description>2021-06-17:　sbuild使用に更新
開発環境の基本 開発環境は、できるだけ安定しているほうがストレスが少ないです。editorを 使いメールやウエッブページを読むだけならstable環境が使えればそれでも いいのですが、新しいハードウエアー (Thinkpad T14, AMD Ryzen 5 PRO 4650U with Radeon Graphics)だとグラフィクスドライバーの問題があるので testing ぐらいは必要です。でも歳々アップデートすると不安定になったりして面倒です。
パッケージ作成環境 以前は、pbuilder/cowbuilder を使って仮想化されたchroot環境を使っていましたが、 最近はschroot/sbuildででも確実に sid/unstable 環境を確保でき、色々便利なので 乗り換えました。
開発環境をsidにしなくても確実にパッケージが正しいsid環境で作成できます。
英語：Sbuildインフラ参照. これで、sbuild コマンド実行で、 sid/unstable 環境で確実にパッケージが作成できます。
デバグ用の仮想環境作成 (chroot) デバグ操作用のsid/unstable 環境の作業用のシェル環境が、現在のHOME環境のままで快適に使えるので便利です。
英語：Schrootインフラ参照. devsコマンドで、作業用の chroot 環境のベースとなるソースchroot 環境 にパッケージの 追加や削除や更新ができるシェルプロンプトへ、現在のHOME環境のままで移動できます。
devxコマンドで、gitkが使えるX環境へのアクセスできる作業用の使い捨てできる作業用の chroot 環境に、現在のHOME環境のままで移動できます。</description>
    </item>
    
  </channel>
</rss>
