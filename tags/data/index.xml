<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>data on Goofing Osamu</title>
    <link>/tags/data/</link>
    <description>Recent content in data on Goofing Osamu</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 29 May 2022 00:00:00 +0000</lastBuildDate><atom:link href="/tags/data/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>可読データー表現 (1)</title>
      <link>/jp/2022/05/29/readable-data01/</link>
      <pubDate>Sun, 29 May 2022 00:00:00 +0000</pubDate>
      
      <guid>/jp/2022/05/29/readable-data01/</guid>
      <description>設定データーや設定に使うデーターベース等は、規則的な構造で可読化(エディターで閲覧編集)すると、既存ツールが使えて便利です。
可読データー表現法のリスト 振り返って見たら、 可読化されたデーターは結構色々使ってます。
表データーの表現にはCSVやTSV (JA) TSV (EN) UNIXパスワードファイル(/etc/passwd)等には「:」を使うDSV E-メールデーターで用いるRFC 822 Debianのパッケージ設定で用いるDEB 822 文書やデーターベース等の複雑な構造のデーターの記述にはXML (JA) XML (EN) Gitの設定ファイルはINI (JA) INI (EN) Pythonのパッケージ設定のpyproject.tomlにはTOML (JA) TOML (EN) QMKのファームウエアーのビルド条件記述ではJSON (JA) JSON (EN) intercept (キーボード入力の差替えツール)ではYAML (JA) YAML (EN) ちょっと混乱してしまいそうです。XMLよりは読みやすく複雑なデーター記述ができながらコンピューター処理にも向いたフォーマットということで、「INI」, 「JSON」, 「TOML」, 「YAML」の４つのデーターシリアル化 (EN) (データーシリアル化 (JA)) 手法を見ていきます。
これらは、人間がエディターで触るのに比較的ハードルが低く、さらに多くのコンピューター言語で読み込み書き出しをするライブラリー化されサポートされているので、非常に使いやすいです。
可読データー表現例 INI 昔のWindowsの設定ファイルのデファクトスタンダード。２レベルまでのサポートという問題や、方言が多い問題がある。 Python標準ライブラリーでサポートれる。
; last modified 1 April 2001 by John Doe [owner] name = John Doe organization = Acme Widgets Inc. [database] ; use IP address in case network name resolution is not working server = 192.</description>
    </item>
    
  </channel>
</rss>
