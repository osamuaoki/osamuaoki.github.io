<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>evdev on Goofing Osamu</title>
    <link>/tags/evdev/</link>
    <description>Recent content in evdev on Goofing Osamu</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 03 Jun 2022 00:00:00 +0000</lastBuildDate><atom:link href="/tags/evdev/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>内蔵キーボードのキーマップ改変</title>
      <link>/jp/2022/06/03/evdev02/</link>
      <pubDate>Fri, 03 Jun 2022 00:00:00 +0000</pubDate>
      
      <guid>/jp/2022/06/03/evdev02/</guid>
      <description>実験準備 内蔵キーボードのキーマップ改変準備の結果を生かす環境をつくるべく、とりあえずDebianの正式パッケージinterception-toolsをアップロードしました。
アップストリームはシェルからの直接起動方法の基本として以下を例示してます。
$ sudo nice -n -20 udevmon -c udevmon.yaml &amp;gt;udevmon.log 2&amp;gt;udevmon.err &amp;amp; Interception plugin for vimproved inputの作者が示している、テスト時のトラブル防止策が参考になります。
# sleep 1 &amp;amp;&amp;amp; sudo nice -n -20 timeout 10 udevmon -c /etc/udevmon.yml sleepで１秒待つことで、ターミナルから離れて実験環境に移動できます。 timeoutでキーボード入力ができなくなったままになる事を回避しています。 (わたしは、追加の外付けUSBキーボードをつないでおくことも考えています。)
また、使用するフィルタープログラムは、起動時に入出力バッファをクリアーすることも推奨されるようです。
アップストリーム作成のudevmon.serviceファイルは、-3 Debian revision 以降はバイナリーパッケージに同梱されています。
udevmonをudevmon.serviceファイルを使ってSystemdによりudevmonを自動起動させるよう、このファイルをとりあえず/etc/systemd/system/に置きます。 (もちろん、パッケージとしては/lib/systemd/system/にでもこのファイルをインストールして、そこに/etc/systemd/system/からsymlinkをはるようするのでしょう。)
この自動起動設定の有効化と起動実験は以下となります。（これだと、シェルからの直接起動の様にsleepすることはない模様）
$ sudo systemctl enable --now udevmon.service また、フィルターを書く際に気になるのはclearing bufferですが、そえは後ほど。。。。
本体付属キーボード(i8042)用の設定 内蔵キーボードは/dev/input/by-path/platform-i8042-serio-0-event-kbdということがわかっているので、/etc/interception/udevmon.d/ディレクトリーを作成し、テスト用のダミーのint-kbd.yamlファイルを以下の内容で作成しました。
- JOB: intercept -g $DEVNODE | cat - | uinput -d $DEVNODE DEVICE: LINK: /dev/input/by-path/platform-i8042-serio-0-event-kbd 上記の様にして起動実験して問題無しです。
フィルター evmk 今度はsystemdのjournalへのログ出力ができるようにした、改良版のフィルター・ログ用のプログラムevmkを使うように、int-kbd.</description>
    </item>
    
    <item>
      <title>内蔵キーボードのキーマップ改変準備</title>
      <link>/jp/2022/06/03/evdev01/</link>
      <pubDate>Fri, 03 Jun 2022 00:00:00 +0000</pubDate>
      
      <guid>/jp/2022/06/03/evdev01/</guid>
      <description>キーボード状況 USB接続の自作外付けキーボードでは、キーマップがQMKを使うとキーマップ改変が自由に構成でき、HOME ROW MOD等を使うと動きの少ない手や指にやさしいタイピングができます。
PC内蔵のキーボードででも、同じようにキーマップ改変ができないかと言う気になり色々調査しました。
interception-toolsを利用すれば、evdevのデーターをフィルター処理しキーマップを改変できそうです。 ただevdevのデーターの実際に使用されている慣習や制約、また異常時の対応法など不明点もあります。 単なるキーの置き換え以上の適当な先行例が見当たりません。
公式のプラグインのDual Function Keysには、HOME ROW MODが上手く動作しないともかかれています。どうも状況は簡単ではないようです。
実際の状況や解決策が分かりにくいので、まず読みやすいPythonのchorded_keymapを見ました。この中のプログラムをベースにデーターダンプするユーティリティーを作り、更にもう一度出力をオプションでコントロール出きるように、最初から書き直し実状調査をしました。あとから考えるとほぼ同じ機能のコマンドevtestがあるんですが、この経験をしたことで少し実態が分かりました。
本体付属キーボード(i8042) やっつけで書いたログをstdoutに吐き出すこの解析用のmanglekbdプログラムの出力(時間は差分表示)は、本体付属の英語キーボードだと以下です。
$ sudo intercept /dev/input/by-path/platform-i8042-serio-0-event-kbd | python3 ~/bin/manglekbd -s u 0.024794	MSC,SCAN,0x1c	KEY,ENTER,↑	SYN,REPORT,0	0.486209	MSC,SCAN,0x2a	KEY,LEFTSHIFT,↓	SYN,REPORT,0	0.161347	MSC,SCAN,0x1e	KEY,A,↓	SYN,REPORT,0	A 0.082717	MSC,SCAN,0x1e	KEY,A,↑	SYN,REPORT,0	0.147690	MSC,SCAN,0x1f	KEY,S,↓	SYN,REPORT,0	S 0.070924	MSC,SCAN,0x1f	KEY,S,↑	SYN,REPORT,0	0.216163	MSC,SCAN,0x20	KEY,D,↓	SYN,REPORT,0	D 0.085756	MSC,SCAN,0x20	KEY,D,↑	SYN,REPORT,0	0.212290	MSC,SCAN,0x21	KEY,F,↓	SYN,REPORT,0	F 0.103219	MSC,SCAN,0x21	KEY,F,↑	SYN,REPORT,0	0.220644	MSC,SCAN,0x22	KEY,G,↓	SYN,REPORT,0	G 0.</description>
    </item>
    
  </channel>
</rss>
