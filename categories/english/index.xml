<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>english on Goofing Osamu</title>
    <link>/categories/english/</link>
    <description>Recent content in english on Goofing Osamu</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 04 Jun 2024 00:00:00 +0000</lastBuildDate><atom:link href="/categories/english/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Re-learning Vim (8)</title>
      <link>/en/2024/06/04/vim-learn-8/</link>
      <pubDate>Tue, 04 Jun 2024 00:00:00 +0000</pubDate>
      
      <guid>/en/2024/06/04/vim-learn-8/</guid>
      <description>Nvim configuration retrospective I have been updating Nvim configuration with LazyVim as described in Re-learning Vim (7) to make it behave as close as plain Nvim.
Folding of markdown file I have always used gq under visual line mode to rewrap range of lines within &#39;textwidth. Since LazyVim sets &#39;formatexpr, it doesn&amp;rsquo;t work as expected any more for some &#39;filetype such as markdown.
Easy workaround is to use gw instead.</description>
    </item>
    
    <item>
      <title>GTD and Pomodoro</title>
      <link>/en/2024/03/28/gtd-1/</link>
      <pubDate>Thu, 28 Mar 2024 00:00:00 +0000</pubDate>
      
      <guid>/en/2024/03/28/gtd-1/</guid>
      <description>Here is my take on GTD and Pomodoro for project managements:
See GTD.pptx.</description>
    </item>
    
    <item>
      <title>Git cheatsheet</title>
      <link>/en/2024/03/27/git-1/</link>
      <pubDate>Wed, 27 Mar 2024 00:00:00 +0000</pubDate>
      
      <guid>/en/2024/03/27/git-1/</guid>
      <description>Here is my take on git basic operations:
See Git-operations5.odp.</description>
    </item>
    
    <item>
      <title>Web UI with INCUS (9)</title>
      <link>/en/2024/03/16/lxc-9/</link>
      <pubDate>Sat, 16 Mar 2024 00:00:00 +0000</pubDate>
      
      <guid>/en/2024/03/16/lxc-9/</guid>
      <description>Here is a series of memos of me trying to use LXC/LXD and INCUS on Debian 12 (bookworm).
I am using Incus for Debian 12 from Zabbly package repository.
Incus web UI Set up port 8443 for Incus:
$ incus config set core.https_address &amp;#34;:8443&amp;#34; Then start any modern browser with it URL pointing to https://localhost:8443.
Don&amp;rsquo;t be afraid of WARNINGS and proceed :-) Click &amp;ldquo;Create a new certificate&amp;rdquo; button and follow the web GUI instruction.</description>
    </item>
    
    <item>
      <title>Virtual machine with INCUS (8)</title>
      <link>/en/2024/03/15/lxc-8/</link>
      <pubDate>Fri, 15 Mar 2024 00:00:00 +0000</pubDate>
      
      <guid>/en/2024/03/15/lxc-8/</guid>
      <description>Here is a series of memos of me trying to use LXC/LXD and INCUS on Debian 12 (bookworm).
I am using Incus for Debian 12 from Zabbly package repository.
Full DE in VM and its storage size I had problem with VM created by INCUS when I installed full DE and upgraded to the testing due to &amp;ldquo;disk full`.
In order to check reason for the above problem, I installed most DE (w/o Office programs) without upgrade again.</description>
    </item>
    
    <item>
      <title>Virtual machine with INCUS (7)</title>
      <link>/en/2024/03/13/lxc-7/</link>
      <pubDate>Wed, 13 Mar 2024 00:00:00 +0000</pubDate>
      
      <guid>/en/2024/03/13/lxc-7/</guid>
      <description>Here is a series of memos of me trying to use LXC/LXD and INCUS on Debian 12 (bookworm).
In order to make full transition to incus, I will trace what I did with lxc with incus while addressing not only container systems but also virtual machine systems.
I am using Incus for Debian 12 from Zabbly package repository.
Simple start of Container and VM with Incus Let me trace Container with LXC/LXD (1).</description>
    </item>
    
    <item>
      <title>Container with INCUS (6)</title>
      <link>/en/2024/03/02/lxc-6/</link>
      <pubDate>Sat, 02 Mar 2024 00:00:00 +0000</pubDate>
      
      <guid>/en/2024/03/02/lxc-6/</guid>
      <description>Here is a series of memos of me trying to use LXC/LXD and INCUS on Debian 12 (bookworm).
What is LXD and Incus It has been some time since Container with LXC/LXD (1).
Upstream Incus (0.6 released 2024-02-23) is at https://github.com/lxc/incus by linuxcontainers.org &amp;ldquo;Incus 0.6 has been released&amp;rdquo; announcement gives explanations on technical changes. The command name has been changed to incus. コンテナと仮想マシンのマネージャ&amp;quot;Incus&amp;quot; (Japanese) also gives a nice overview. Incus is available for Debian 12 from Zabbly package repository.</description>
    </item>
    
    <item>
      <title>Ansible (3)</title>
      <link>/en/2024/02/20/ansible-3/</link>
      <pubDate>Tue, 20 Feb 2024 00:00:00 +0000</pubDate>
      
      <guid>/en/2024/02/20/ansible-3/</guid>
      <description>Here is a series of memos of me trying to use ansible on Debian 12 (bookworm).
FYI: Test code github repo
Recap of my trials of playbooks Up to here, I tried simple playbooks in which a playbook runs in order from top to bottom.
Let me read over again &amp;ldquo;Playbook execution&amp;rdquo;:
Playbook execution A playbook runs in order from top to bottom. Within each play, tasks also run in order from top to bottom.</description>
    </item>
    
    <item>
      <title>Ansible (2)</title>
      <link>/en/2024/02/19/ansible-2/</link>
      <pubDate>Mon, 19 Feb 2024 00:00:00 +0000</pubDate>
      
      <guid>/en/2024/02/19/ansible-2/</guid>
      <description>Here is a series of memos of me trying to use ansible on Debian 12 (bookworm).
FYI: Test code github repo
Searching roles in Ansible Galaxy and ansible-galaxy Ansible Galaxy is a curation site for Ansible scripts. They are offered in 2 formats:
Roles &amp;ndash; data downloaded as &amp;ldquo;git clone ...&amp;rdquo;. Collections &amp;ndash; data downloaded in &amp;ldquo;*.tar.gz&amp;rdquo; format. Once some interesting script is found from the search on the Ansible Galaxy web site, execute the listed command.</description>
    </item>
    
    <item>
      <title>Ansible (1)</title>
      <link>/en/2024/02/17/ansible-1/</link>
      <pubDate>Sat, 17 Feb 2024 00:00:00 +0000</pubDate>
      
      <guid>/en/2024/02/17/ansible-1/</guid>
      <description>I realize that it is about time to getting organized for my system setup in a way better than making notes and writing shell scripts.
I decided to deploy Ansible for localhost only with CLI to help me get organized and learn Ansible.
Since upstream Ansible documentation addresses more generic remote host usages and is too much to digest, this memo should be a good minimal use case for me to get started.</description>
    </item>
    
    <item>
      <title>Container podman (1)</title>
      <link>/en/2024/02/14/podman-1/</link>
      <pubDate>Wed, 14 Feb 2024 00:00:00 +0000</pubDate>
      
      <guid>/en/2024/02/14/podman-1/</guid>
      <description>Here is a series of memos of me trying to use podman on Debian 12 (bookworm).
LXD (Incus) is a good platform for the system container as I tried in:
Container with LXC/LXD (1) Container with LXC/LXD (2) Container with LXC/LXD (3) Container with LXC/LXD (4) Container with LXC/LXD (5) The docker command still is the de facto standard for the application container.
As I checked recent Google trend: podman, kvm, docker, lxc, lxd</description>
    </item>
    
    <item>
      <title>python pipy.org and pyproject.toml</title>
      <link>/en/2024/02/03/python-pypi/</link>
      <pubDate>Sat, 03 Feb 2024 00:00:00 +0000</pubDate>
      
      <guid>/en/2024/02/03/python-pypi/</guid>
      <description>I realized the main stream packaging practice now uses pyproject.toml instead of setup.cfg or setup.py.
I wanted to upload a package imediff to pipy.org repository while converting it to use pyproject.toml. Getting confused by the documentation sites which are still actively updated to catch up with the new style to use pyproject.toml etc., I managed to upload a package to pypi.org.
Here are the list of sites which I visited:</description>
    </item>
    
    <item>
      <title>python venv</title>
      <link>/en/2024/02/02/python-venv/</link>
      <pubDate>Fri, 02 Feb 2024 00:00:00 +0000</pubDate>
      
      <guid>/en/2024/02/02/python-venv/</guid>
      <description>Python virtual environment I finally get to use python virtual environment using venv module to be created under ~/.venv/. (I wanted to upload a package to pypi.org)
$ apt install python3-pip twine ... $ python3 -m venv ~/.venv $ source ~/.venv/bin/activate (.venv) $ install --upgrade pip ... (.venv) $ install --upgrade twine ... (.venv) $ deactivate System packages were current enough to cause printing Found existing installation: pip 23.0.1, etc. and no new packages were installed in ~/.</description>
    </item>
    
    <item>
      <title>Automatic USB backup</title>
      <link>/en/2024/01/02/backup-2/</link>
      <pubDate>Tue, 02 Jan 2024 00:00:00 +0000</pubDate>
      
      <guid>/en/2024/01/02/backup-2/</guid>
      <description>Here is a memo over automatic USB backup.
This is a follow-up of &amp;ldquo;Backup and snapshot&amp;rdquo;.
(This uses the latest batch and gather subcommand of bss)
udev(7) under &amp;ldquo;RUN&amp;rdquo; clearly states &amp;ldquo;This can only be used for very short-running foreground tasks.&amp;rdquo;.
We still see old tips such as Automatic backups with UDEV (2009), which abuse &amp;ldquo;RUN&amp;rdquo; in udev rule to perform backup. These tips shouldn&amp;rsquo;t be followed.
Under modern system managed by systemd, it seems we need to use its systemd service file with &amp;ldquo;wants&amp;rdquo; mechanism.</description>
    </item>
    
    <item>
      <title>Logging Global IP address</title>
      <link>/en/2023/12/24/ip-1/</link>
      <pubDate>Sun, 24 Dec 2023 00:00:00 +0000</pubDate>
      
      <guid>/en/2023/12/24/ip-1/</guid>
      <description>Here is a memo over IP address and its logging.
Local IP address Local IP address can be obtained by using ip addr.
$ ip addr For processing this output with script, use of -o option is handy.
Global IP address If a workstation is behind the firewall, Global IP address is that for the gateway device.
Googling &amp;ldquo;what is my IP&amp;rdquo; gives lots of sites offering Global IP verification.</description>
    </item>
    
    <item>
      <title>IMAP/POP/SMTP proxy to add OAuth 2.0</title>
      <link>/en/2023/12/13/oauth2-1/</link>
      <pubDate>Wed, 13 Dec 2023 00:00:00 +0000</pubDate>
      
      <guid>/en/2023/12/13/oauth2-1/</guid>
      <description>I researched on IMAP/POP/SMTP proxy programs that transparently add OAuth 2.0 authentication for email clients that don&amp;rsquo;t support this method.
For now, I only leave links here. (Maybe, I will try some of them with mutt, postfix, exim4, etc.)
Notable OAuth 2.0 proxy programs As I checked 2023-12:
Project (source) star GUI Platform size updated email-oauth2-proxy 446 YES python web 260K 2023-11 o2popper 8 YES python + wx 128K 2022-12 mutt_oauth2.</description>
    </item>
    
    <item>
      <title>Self-Signed TLS certificate (1)</title>
      <link>/en/2023/11/30/openssl-1/</link>
      <pubDate>Thu, 30 Nov 2023 00:00:00 +0000</pubDate>
      
      <guid>/en/2023/11/30/openssl-1/</guid>
      <description>I researched on creating self-signed certificates in Privacy-Enhanced Mail (PEM) format for use in testing HTTPS server and RDP connections.
CA certificates As I checked CA certificates in /etc/ssl/certs for accessing HTTPS (TLS) web pages, I see Signature Algorithm as:
ecdsa-with-SHA256 ecdsa-with-SHA384 sha1WithRSAEncryption sha256WithRSAEncryption sha384WithRSAEncryption sha512WithRSAEncryption Here, I used openssl x509 -in &amp;lt;filename&amp;gt; -noout -text to check content of certificates.
RSA (2048bit) algorithm Since sha256WithRSAEncryption is most popular for CA certificates, I tried to create self-signed one in 3 steps:</description>
    </item>
    
    <item>
      <title>RDP/VNC (1)</title>
      <link>/en/2023/11/29/rdp-1/</link>
      <pubDate>Wed, 29 Nov 2023 00:00:00 +0000</pubDate>
      
      <guid>/en/2023/11/29/rdp-1/</guid>
      <description>I researched on the current tool choices for RDP/VNC.
GUI remote access client Package name RDP VNC SSH SPICE command (menu) vinagre YES YES YES YES vinagre (remote desktop viewer) archived upstream remmina YES YES YES YES* remmina virt-viewer &amp;mdash; YES &amp;mdash; YES remote-viewer gnome-connections YES YES &amp;mdash; &amp;mdash; (connections) krdc YES YES &amp;mdash; &amp;mdash; Here, remmina is missing SPICE support in Debian 12 bookworm due from GTK+1 to GTK+2 library transition.</description>
    </item>
    
    <item>
      <title>Container with LXC/LXD (5)</title>
      <link>/en/2023/11/15/lxc-5/</link>
      <pubDate>Wed, 15 Nov 2023 00:00:00 +0000</pubDate>
      
      <guid>/en/2023/11/15/lxc-5/</guid>
      <description>Here is a series of memos of me trying to use LXC/LXD on Debian 12 (bookworm).
YAML to allow IPCs for Wayland + X + sounds Here is a YAML data example (waylandx.yaml) to add disk device for many IPC sockets supporting Wayland + X + sounds.
config: boot.autostart: false raw.idmap: both 1000 1000 security.nesting: &amp;#34;true&amp;#34; user.user-data: | #cloud-config users: - name: osamu lock_passwd: True groups: [adm, audio, cdrom, dialout, dip, floppy, plugdev, sudo, video] sudo: [&amp;#34;ALL=(ALL) NOPASSWD:ALL&amp;#34;] shell: /bin/bash write_files: - path: /usr/local/bin/mystartup.</description>
    </item>
    
    <item>
      <title>Container with LXC/LXD (4)</title>
      <link>/en/2023/11/14/lxc-4/</link>
      <pubDate>Tue, 14 Nov 2023 00:00:00 +0000</pubDate>
      
      <guid>/en/2023/11/14/lxc-4/</guid>
      <description>Here is a series of memos of me trying to use LXC/LXD on Debian 12 (bookworm).
Running GUI application in container Unlike console applications, running GUI applications in container is a bit complicate. For now, I found some HOWTOs:
Incus / LXD profile for GUI apps: Wayland, X11 and Pulseaudio (2023-11-17) Use Wayland and Xorg applications (updated 2023-10-07) LXD Containers for Wayland GUI Apps (2022-08-28) How to run GUI apps in LXD containers (2022-08-04) HOWTO: Use the Host’s Wayland and XWayland Servers inside containers (updated 2022-03-18) GUI application via Wayland from Ubuntu LXD container on Arch Linux host (2018-01-01) All these interesting references are not always using GNOME wayland under the Debian bookworm environment.</description>
    </item>
    
    <item>
      <title>Container with LXC/LXD (3)</title>
      <link>/en/2023/11/13/lxc-3/</link>
      <pubDate>Mon, 13 Nov 2023 00:00:00 +0000</pubDate>
      
      <guid>/en/2023/11/13/lxc-3/</guid>
      <description>Here is a series of memos of me trying to use LXC/LXD on Debian 12 (bookworm).
Clean up d0 instance for experiment In following examples, the instance d0 is always deleted in advance without mentions by:
$ lxc stop d0 $ lxc delete d0 or simply:
$ lxc delete d0 -f Merging YAML settings As seen in following examples, YAML settings of lxc are merged by key for dictionary.
subuid and subgid on Debian with LXD UID and GID:</description>
    </item>
    
    <item>
      <title>Container with LXC/LXD (2)</title>
      <link>/en/2023/11/12/lxc-2/</link>
      <pubDate>Sun, 12 Nov 2023 00:00:00 +0000</pubDate>
      
      <guid>/en/2023/11/12/lxc-2/</guid>
      <description>Here is a series of memos of me trying to use LXC/LXD on Debian 12 (bookworm).
Default LXD Debian image issues Let me simply use the default LXD Debian image to launch d0 instance with:
$ lxd launch images:debian/12/cloud d0 Then, the resulting d0 image has a few glitches to my taste:
The primary user in the container is always debian having UID=1000, GID=1001 The netdev group is generated as GID=1000 (this is system group and should have GID somewhere between 100 and 999.</description>
    </item>
    
    <item>
      <title>SSH ED25519 key setup</title>
      <link>/en/2023/11/01/ssh-1/</link>
      <pubDate>Wed, 01 Nov 2023 00:00:00 +0000</pubDate>
      
      <guid>/en/2023/11/01/ssh-1/</guid>
      <description>Here is a memo of me trying to update my SSH setting on Debian 12 (bookworm).
Several articles motivated me to move away from old 2048 RSA key to new ed25519.
ssh-keygen(1) default = 3072 bits as of 2023 Wikipedia: ssh-keygen Wikipedia: key size stackexchange: SSH key strength stackexchange: SSH Key: Ed25519 vs RSA Generate new ED25519 key $ ssh-keygen -t ed25519 -C &amp;#34;osamu@goofy&amp;#34; Generatingublic/private ed25519 keyair. Enter file in which to save the key (/home/osamu/.</description>
    </item>
    
    <item>
      <title>IPv4 and IPv6 basics</title>
      <link>/en/2023/10/20/network-1/</link>
      <pubDate>Fri, 20 Oct 2023 00:00:00 +0000</pubDate>
      
      <guid>/en/2023/10/20/network-1/</guid>
      <description>Here is a memo of me trying to understand typical IP address usages on typical desktop systems.
IPv4 and IPv6 basics IPv4
8 bit * 4 = 32 bit address space (2^32 addresses) Loopback: IP block=127.0.0.0/8 (2^24 addresses) for localhost. Multicast IPv4 address block = 224.0.0.0/4 mDNS: IP=224.0.0.251, UDP, port=5353 Link-local address: IP block=169.254.0.0/16 (2^16 addresses) Private IPv4 network 10.0.0.0/8 &amp;ndash; 1 x Class A network with 2^24=16777216 addresses 172.16.0.0/12 &amp;ndash; 2**4=16 x Class B networks, each with 2^16=65536 addresses 192.</description>
    </item>
    
    <item>
      <title>Container with LXC/LXD (1)</title>
      <link>/en/2023/10/11/lxc-1/</link>
      <pubDate>Wed, 11 Oct 2023 00:00:00 +0000</pubDate>
      
      <guid>/en/2023/10/11/lxc-1/</guid>
      <description>Here is a series of memos of me trying to use LXC/LXD on Debian 12 (bookworm).
What is LXC LXC is a well-known Linux container runtime that consists of tools, templates, and library and language bindings. It&amp;rsquo;s pretty low level, very flexible and covers just about every containment feature supported by the upstream kernel.
What is LXD and Incus Upstream LXD (5.18 released 2023-09-20) is at https://github.com/canonical/lxd by Canonical LXD is a modern, secure and powerful system container and virtual machine manager.</description>
    </item>
    
    <item>
      <title>Debian Workstation (usability) (v2023-10)</title>
      <link>/en/2023/10/07/debian-usability-2023a/</link>
      <pubDate>Sat, 07 Oct 2023 00:00:00 +0000</pubDate>
      
      <guid>/en/2023/10/07/debian-usability-2023a/</guid>
      <description>Workstation usability The older deprecated guide was used as the base.
Considering GNOME post-44 is going through major changes, I still chose to use GNOME 43 in Debian 12 bookworm stable release for my workstation as of 2024-01-04.
I am trying to keep my workstation as clean bookworm installation as possible.
This is non-hardware specific notes and tips. For the hardware specific notes and tips, see also:
Thinkpad T14 Gen 1 &amp;ndash; hostname=goofy Sony Vaio SVT1313 &amp;ndash; hostname=casper hostname=mickey Bare metal initial system installation Initial installation by debian-installer The initial installation by the debian-installer should skip &amp;ldquo;Desktop environment (task-desktop)&amp;rdquo; task and select &amp;ldquo;SSH server (task-ssh-server)&amp;rdquo; to make it light, GUI-less, and SSH-ready.</description>
    </item>
    
    <item>
      <title>System loads and shutdown timeout</title>
      <link>/en/2023/07/01/systemd-shutdown/</link>
      <pubDate>Sat, 01 Jul 2023 00:00:00 +0000</pubDate>
      
      <guid>/en/2023/07/01/systemd-shutdown/</guid>
      <description>Here is a memo to make a Linux system run and shutdown smoothly and quickly.
Ruducing system loads I have edited Settings -&amp;gt; Search menu to disable background jobs.
Currently, I disabled everything. This seems to reduce CPU loads from the following process names:
tracker-miner-fs-3 about 5-8% tracker-extract-3 about 3-5% Quick workaround for timeout https://itsfoss.com/long-shutdown-linux/ Edit /etc/systemd/system.conf to reduce timeout from default 100s according to systemd-system.conf(5):
DefaultTimeoutStartSec=, DefaultTimeoutStopSec=, DefaultTimeoutAbortSec=, DefaultRestartSec= Configures the default timeouts for starting, stopping and aborting of units, as well as the default time to sleep between automatic restarts of units, as configured per-unit in TimeoutStartSec=, TimeoutStopSec=, TimeoutAbortSec= and RestartSec= (for services, see systemd.</description>
    </item>
    
    <item>
      <title>GNOME shell extension for input methods</title>
      <link>/en/2023/06/19/gnome-im-1/</link>
      <pubDate>Mon, 19 Jun 2023 00:00:00 +0000</pubDate>
      
      <guid>/en/2023/06/19/gnome-im-1/</guid>
      <description>Since I didn&amp;rsquo;t find GNOME shell extension to provide shortcuts to input method activations, I decided to create one by following examples of existing extensions without rigorous learning. I also worked on quick touchpad control. See my final result at:
Quick switching of input method and touchpad I also updated GNOME extensions for better UX.
Simple GNOME shell extension One can create a skelton of a simple GNOME shell extension as:</description>
    </item>
    
    <item>
      <title>GNOME shell tweaks</title>
      <link>/en/2023/06/18/gnome-tweaks-1/</link>
      <pubDate>Sun, 18 Jun 2023 00:00:00 +0000</pubDate>
      
      <guid>/en/2023/06/18/gnome-tweaks-1/</guid>
      <description>Launching of a program from GUI You can create a desktop entry file with .desktop extension placed in ~/.local/share/applications/ to launch your program from GUI.
See:
XDG Desktop Entry Specification Linux デスクトップファイルの書き方 Configuration settings of GNOME programs GNOME programs store their settings in GSettings. The configuration tool for GSettings is CLI: gsettings(1). GSettings use a dconf database as the binary data storage backend with its data in ~/.config/dconf/user. The configuration tool for the dconf database is CLI: dconf(1) and GUI: dconf-editor(1).</description>
    </item>
    
    <item>
      <title>GNOME extensions for better UX</title>
      <link>/en/2023/06/17/gnome-extensions-1/</link>
      <pubDate>Sat, 17 Jun 2023 00:00:00 +0000</pubDate>
      
      <guid>/en/2023/06/17/gnome-extensions-1/</guid>
      <description>This is mostly for Debian GNU/Linux 12 (bookworm) running GNOME 43.
After learning to use GNOME shell extension: unsafe-mode-menu for workaround in GNOME shell, I checked other available and interesting GNOME extensions for better UX. Resources checked are:
*U: 15 Best GNOME Extensions for Ubuntu (2022 Edition) *L: 30 Best GNOME Extensions for Ubuntu in 2023 *N: Top +30 Best GNOME Extensions | 2023 Updated *M: 10 Must Have GNOME Shell Extensions for Customizing Your Linux Desktop in 2022 *A: Awesome GNOME I used local install approach of GNOME extension to ~/.</description>
    </item>
    
    <item>
      <title>GNOME shell changes</title>
      <link>/en/2023/06/16/gnome-shell-1/</link>
      <pubDate>Fri, 16 Jun 2023 00:00:00 +0000</pubDate>
      
      <guid>/en/2023/06/16/gnome-shell-1/</guid>
      <description>This is how I resolved GNOME shell configuration trouble and came up as Debian Workstation (usability) (v2023) &amp;ndash; Keyboard shortcut customization (GNOME Settings – custom shortcut)
Keyboad shortcuts stopped working Since 2022, tricks written in my old キーボード入力モード選択 and its English translated description Debian Workstation (usability) (old)) &amp;ndash; Keyboard shortcut customization (GNOME Settings) stopped working for me.
This breakage seemed to have happened with changes made in 2022.
My initial reaction to brokage of trick method was this may be caused by changes of javascript codes in gnome-shell.</description>
    </item>
    
    <item>
      <title>Files (nautilus)</title>
      <link>/en/2023/05/20/nautilus-1/</link>
      <pubDate>Sat, 20 May 2023 00:00:00 +0000</pubDate>
      
      <guid>/en/2023/05/20/nautilus-1/</guid>
      <description>This is based on nautilus version 43.2 in 2023 (Debian/Bookworm).
Gnome Files &amp;ldquo;Gnome Files&amp;rdquo; (a.k.a nautilus) is the default file manager for GNOME desktop environment. It is rather a simple file manager with primitive functionalities, but it can be extended to offer rich features.
gnome-terminal started from nautilus using extension The nautilus-extension-gnome-terminal package is automatically installed when gnome-terminal is installed and enables nautilus GUI to start gnome-terminal CLI session. There are 2 ways.</description>
    </item>
    
    <item>
      <title>L17N of programs</title>
      <link>/en/2023/04/28/l10n-1/</link>
      <pubDate>Fri, 28 Apr 2023 00:00:00 +0000</pubDate>
      
      <guid>/en/2023/04/28/l10n-1/</guid>
      <description>The most annoying L10N problem for me as ja user is the font variant selection. zh_CN seems to be chosen as Asian font variant default for en_US environment. This prompted me to summarize tips here.
L10N mechanism L10N (localization) of programs written with proper I18N (internationalization) may be controlled by the values of environment variables.
LC_* variables are described in locale(7) manpage. LANGUAGE is described in info gettext &amp;quot;The LANGUAGE variable&amp;quot;.</description>
    </item>
    
    <item>
      <title>HEIF image files</title>
      <link>/en/2023/04/21/heif-1/</link>
      <pubDate>Fri, 21 Apr 2023 00:00:00 +0000</pubDate>
      
      <guid>/en/2023/04/21/heif-1/</guid>
      <description>High Efficiency Image File Format (HEIF) High Efficiency Image File Format (HEIF) is used by iPhone with its file extension .HEIC.
Here are tips to cope with HEIF image files on Debian.
HEIF to JPEG conversion You can convert a HEIF image file to JPEG by installing libheif-examples package.
$ heif-convert foo.HEIF foo.JPEG Eye of GNOME Image Viewer Eye of GNOME Image Viewer (eog package) can support to display HEIF image files by installing heif-gdk-pixbuf package.</description>
    </item>
    
    <item>
      <title>Re-learning Vim (7)</title>
      <link>/en/2023/03/05/vim-learn-7/</link>
      <pubDate>Sun, 05 Mar 2023 00:00:01 +0000</pubDate>
      
      <guid>/en/2023/03/05/vim-learn-7/</guid>
      <description>Nvim configuration retrospective I have been updating Nvim configuration with AstroNvim as described in Re-learning Vim (5) and Re-learning Vim (6).
I also build the latest Nvim in Building Neovim to be compatible with the latest packages.
Although AstroNvim provided me with great features with simple and consistent customization mechanism, they were still a bit overwhelming and sometimes too much. I needed a simpler baseline Neovim configuration platform which offers most features as opt-in.</description>
    </item>
    
    <item>
      <title>Building Neovim</title>
      <link>/en/2023/03/05/nvim-build/</link>
      <pubDate>Sun, 05 Mar 2023 00:00:00 +0000</pubDate>
      
      <guid>/en/2023/03/05/nvim-build/</guid>
      <description>CMake revisited Since Neovim uses CMake as its build system, I made quick review of its usage after reading following interesting references.
CMake Reference: CPack DEB Generator Making a deb package with CMake/CPack and hosting it in a private APT repository Effective Modern CMake Everything You Never Wanted to Know About CMake CMake basics The good old way to configure a source package with CMake is as follows:
$ cd path/to/source $ mkdir build $ cd build $ cmake [&amp;lt;options&amp;gt;] .</description>
    </item>
    
    <item>
      <title>Debian Workstation (usability) (v2023)</title>
      <link>/en/2023/02/25/debian-usability-2023/</link>
      <pubDate>Sat, 25 Feb 2023 00:00:00 +0000</pubDate>
      
      <guid>/en/2023/02/25/debian-usability-2023/</guid>
      <description>This is an deprecated guide. See the newer deprecated guide.
This is based on the older deprecated guide.
Workstation usability Let me update note on configuring and administrating my workstation under post-Debian Bookworm (12) GNU/Linux in testing.
This is non-hardware specific notes and tips.
For the hardware specific notes and tips, see:
Thinkpad T14 Gen 1 &amp;ndash; hostname=goofy Sony Vaio SVT1313 &amp;ndash; hostname=casper hostname=mickey System installation Initial installation by debian-installer The initial installation by the debian-installer should skip &amp;ldquo;Desktop environment&amp;rdquo; task to make it light GUI-less install.</description>
    </item>
    
    <item>
      <title>systemd-nspawn (1)</title>
      <link>/en/2023/02/20/systemd-nspawn-1/</link>
      <pubDate>Mon, 20 Feb 2023 00:00:00 +0001</pubDate>
      
      <guid>/en/2023/02/20/systemd-nspawn-1/</guid>
      <description>Host preparation for systemd-nspawn Get required packages:
$ sudo apt install systemd-container debootstrap Configuring systemd-sysctl.service to enable unprivileged user namespaces required for -U option:
$ echo &amp;#39;kernel.unprivileged_userns_clone=1&amp;#39; | sudo tee /etc/sysctl.d/nspawn.conf $ systemctl restart systemd-sysctl.service Creating a bookworm based a01 system at /srv/chroot/a01/:
$ sudo mkdir -p /srv/chroot/a01 $ sudo debootstrap bookworm /srv/chroot/a01 http://deb.debian.org/debian/ $ sudo systemd-nspawn -D /srv/chroot/a01 -U --machine a01 </description>
    </item>
    
    <item>
      <title>Windows from Linux (1)</title>
      <link>/en/2023/02/13/windows-1/</link>
      <pubDate>Mon, 13 Feb 2023 00:00:00 +0001</pubDate>
      
      <guid>/en/2023/02/13/windows-1/</guid>
      <description>Windows from Linux There are few ways to access Windows resources.
Install Microsoft Windows into a disk partition and make it dual-bootable. Use Windows 365 to use it from web browsers Run Office 365 application in Wine Other tips Dual boot Windows installation from Linux Creation of Windows USB installation media on GNU + Linux platform can be automated by using https://github.com/WoeUSB/WoeUSB.
Let&amp;rsquo;s see what is involved behind &amp;ldquo;Windows from Linux&amp;rdquo; as below.</description>
    </item>
    
    <item>
      <title>Vaio SVT1313 (Intel i5, 2013 model)</title>
      <link>/en/2023/02/13/svt1313-1/</link>
      <pubDate>Mon, 13 Feb 2023 00:00:00 +0002</pubDate>
      
      <guid>/en/2023/02/13/svt1313-1/</guid>
      <description>Let me keep up note on configuring and administrating my Sony Vaio SVT1313 (Intel i5) under Debian GNU/Linux. This is a second hand used PC which costed me about $100 as total after fixing its keyboard.
This is hardware specific tips.
How to access BIOS menu of Sony VAIO SVT1313 Pressing ASSIST button instead of POWER button starts PC with boot device and BIOS setting selection menu.
Why boot with MBR and not with UEFI I got this machine as second hand.</description>
    </item>
    
    <item>
      <title>Re-learning Vim (6)</title>
      <link>/en/2023/02/01/vim-learn-6/</link>
      <pubDate>Wed, 01 Feb 2023 00:00:00 +0000</pubDate>
      
      <guid>/en/2023/02/01/vim-learn-6/</guid>
      <description>AstroNvim v2.11.8 on the current main branch In order to update AstroNvim to the current main branch (which is also nightly branch), Neovim needed to be updated v0.8+. Since the official Debian package was stuck at v0.7, I installed the upstream provided deb package. See Debian BTS #1021339.
The following configuration was built on top of the configuration mentioned in Re-learning Vim (5).
Local customization I customized my Neovim with ~/.</description>
    </item>
    
    <item>
      <title>Personal DEB package repository</title>
      <link>/en/2022/08/20/deb-repo-1/</link>
      <pubDate>Sat, 20 Aug 2022 00:00:00 +0000</pubDate>
      
      <guid>/en/2022/08/20/deb-repo-1/</guid>
      <description>See Debian Workstation (usability) (v2023-10) for how I use personal DEB package repository.
Since my initial write in 2022, I have changed my GPG key in 2024 and used it for signing repository.
My github page It&amp;rsquo;s source is at:
https://github.com/osamuaoki/osamuaoki-hugo (source repo) It&amp;rsquo;s generated content is stored at:
https://github.com/osamuaoki/osamuaoki.github.io (published page repo) Personal DEB-package repo on my github page Since Githubs offer nice web site hosting service, I decided to host my private build results there at http://osamuaoki.</description>
    </item>
    
    <item>
      <title>Re-learning Vim (5)</title>
      <link>/en/2022/07/29/vim-learn-5/</link>
      <pubDate>Fri, 29 Jul 2022 00:00:00 +0000</pubDate>
      
      <guid>/en/2022/07/29/vim-learn-5/</guid>
      <description>Revisit syntax checkers and beyond Let me revisit recent situation over static syntax checkers mentioned in Re-learning Vim (2).
Under NeoVim (&amp;gt;0.7) with Lua, LSP ecosystem around nvim-lspconfig can be used to access local syntax checkers and code style formatter using null-ls.nvim.
upstream: null-ls.nvim. Many required packages for this seem to be compiled and installed by
currently: nvim-lsp-installer (upstream: https://github.com/williamboman/nvim-lsp-installer) Next: mason.nvim (upstream: https://github.com/williamboman/mason.nvim) Shell with LS static syntax checker package: shellcheck (deb) upstream: shellcheck use configuration file: ~/.</description>
    </item>
    
    <item>
      <title>Re-learning Vim (4)</title>
      <link>/en/2022/07/15/vim-learn-4/</link>
      <pubDate>Fri, 15 Jul 2022 00:00:00 +0000</pubDate>
      
      <guid>/en/2022/07/15/vim-learn-4/</guid>
      <description>NOTE: As of 2022-12-23, I use NeoVim (v0.8.1 upstream deb) with AstroNvim (v2.10.1). Upstream of AstroNvim has included many things written below as a part of its official documentation and adopted new features proposed below.
Neovim 0.7 migration After short trial of Neovim (nvim) 0.5 described in Re-learning Vim (3), I went back to the good old Vim with ALE.
As I find out Neovim (nvim) 0.7 now has native LSP support and tools around it seems to be getting mature, I decided to check nvim with lua again.</description>
    </item>
    
    <item>
      <title>dgit cheatsheet</title>
      <link>/en/2022/05/27/dgit-cheatsheet01/</link>
      <pubDate>Fri, 27 May 2022 00:00:00 +0000</pubDate>
      
      <guid>/en/2022/05/27/dgit-cheatsheet01/</guid>
      <description>dgit Cheatsheet Create new Debian packaging repository for salsa.debian.org as follows:
$ git clone -o upstream $HTTPS_UPSTREAM_URL $REPO_NAME $ git remote set-url --push upstream DONT_PUSH $ git checkout -b debian/latest ... debianize as dgit-maint-merge(7) workflow Patch applied source tree (single-debian-patch, auto-commit) Ensure to have d/changelog matching the latest upstream tag Use &amp;#34;git deborig&amp;#34; to make upstream tarball $ git deborig $ sbuild # test build $ git remote add origin $GIT_MY_URL $ git push --set-upstream origin debian/latest .</description>
    </item>
    
    <item>
      <title>How to make ISP with TTL-232R-5V</title>
      <link>/en/2021/11/12/avrisp-alt/</link>
      <pubDate>Fri, 12 Nov 2021 00:00:00 +0000</pubDate>
      
      <guid>/en/2021/11/12/avrisp-alt/</guid>
      <description>This is my manual for TTL-232R-5V based ISP which I made several years ago. I moved this content from other place to make it easy to find. I still use this as my back up IPS. This is 5V only programmer.
I now use my Modified AVRISP MKII (in Japanese) as my main programmer. (If I every program AVR again.)
Circuit It&amp;rsquo;s a bit un-intuitive, but USB to TTL level RS-232 adapter (Serial adapter) can be used in a special bit-bang mode.</description>
    </item>
    
    <item>
      <title>Backup and snapshot</title>
      <link>/en/2021/11/02/backup-1/</link>
      <pubDate>Tue, 02 Nov 2021 00:00:00 +0000</pubDate>
      
      <guid>/en/2021/11/02/backup-1/</guid>
      <description>Backup and snapshot For backup, data needs to be moved to physically separate device. rsync ... is my choice to do this.
For snapshot, data can stay on the same device . btrfs subvolume snapshot ... is my choice to do this.
I created bss script to help me do these easily and its examples contain key parts of the settings.
This bss is designed for flexibility with choice of many options, commands and arguments.</description>
    </item>
    
    <item>
      <title>Re-learning Vim (3)</title>
      <link>/en/2021/09/12/vim-learn-3/</link>
      <pubDate>Sun, 12 Sep 2021 05:22:00 +0000</pubDate>
      
      <guid>/en/2021/09/12/vim-learn-3/</guid>
      <description>This page is here as my old memo and contents are outdated. See:
Re-learning Vim (1) Re-learning Vim (4) Neovim 0.5 migration After finding out Neovim (nvim) 0.5 starts up 30%-40% faster than Vim 8 probably due to asynchronous processing and more effective use of multi-core modern CPU, I decided to migrate to nvim. Then lua thing got my attention. Since nvim source package for version 0.5 was available in Debian experimental, I made a local package from it.</description>
    </item>
    
    <item>
      <title>git submodule (1)</title>
      <link>/en/2021/08/28/git-submodule-01/</link>
      <pubDate>Sat, 28 Aug 2021 00:00:00 +0000</pubDate>
      
      <guid>/en/2021/08/28/git-submodule-01/</guid>
      <description>The git submodule update --init is nice. I checked how all these repos are managed.
If I want to move submodule, I don&amp;rsquo;t need delete and clone again. I can simply move it with &amp;ldquo;git mv &amp;lt;oldpath&amp;gt; &amp;lt;newpath&amp;gt;&amp;rdquo; while we keep using the same local copy of repo.
Let&amp;rsquo;s see how this is done.
&amp;lt;modulename&amp;gt;/.gitmodules This file is checked in to the parent Git repository and contains:
[submodule &amp;#34;pack/github/opt/ale&amp;#34;] path = pack/ale url = https://github.</description>
    </item>
    
    <item>
      <title>Development system (3)</title>
      <link>/en/2021/08/27/dev-03/</link>
      <pubDate>Fri, 27 Aug 2021 00:00:00 +0000</pubDate>
      
      <guid>/en/2021/08/27/dev-03/</guid>
      <description>Pointers to linting tools.
See Re-learning Vim (2) to understand how linters are used from Vim frontend.
Shell shellcheck deb package: shellcheck site: https://github.com/koalaman/shellcheck use in vim via ALE ignore warning: line: &amp;ldquo;# shellcheck disable=SC2059&amp;rdquo; just above code line file: &amp;ldquo;# shellcheck disable=SC2059&amp;rdquo; just below #!/bin/sh user: &amp;ldquo;disable=SC2059&amp;rdquo; in ~/.shellcheckrc list of warnings vim as formtter NORMAL MODE: gg=G Python In case of doubt, chose one lint in ~/.vim/vimrc for ALE by UN-commenting out (instead of running 3 linters, use fast flake8-only):</description>
    </item>
    
    <item>
      <title>Build source with meson (1)</title>
      <link>/en/2021/08/06/meson-1/</link>
      <pubDate>Fri, 06 Aug 2021 00:00:00 +0000</pubDate>
      
      <guid>/en/2021/08/06/meson-1/</guid>
      <description>Since around 2017, GNOME has pushed to use Meson to build its associated programs. I now have no choice but to learn Meson.
Here is my learning process note.
Build infrastructure history GNU Autotools on top of Make has been the de facto standard for the portable build infrastructure since 1990s.
Configure script generation utility, GNU Autoconf has been a core part of GNU Autotools but it was extremely slow to execute and was not intuitive to customize.</description>
    </item>
    
    <item>
      <title>GTK GUI with PyGObject (10)</title>
      <link>/en/2021/07/23/pygi-a/</link>
      <pubDate>Fri, 23 Jul 2021 00:00:00 +0000</pubDate>
      
      <guid>/en/2021/07/23/pygi-a/</guid>
      <description>Note on recent change of environment for GUI design Since the computer monitor screen has changed fro VGA (4:3) to HDTV (16:9), screen got wider. In other word, we have relatively less vertical space for the computer monitor screen.
Now cellphones and tablets are powerful enough to use previously Desktop only general purpose programs. Go the GUI need to handle touch events.
Lastly, X11 is not the only GUI target. Wayland and browser needs to be addressed.</description>
    </item>
    
    <item>
      <title>GTK GUI with PyGObject (9)</title>
      <link>/en/2021/07/22/pygi-9/</link>
      <pubDate>Thu, 22 Jul 2021 00:00:00 +0000</pubDate>
      
      <guid>/en/2021/07/22/pygi-9/</guid>
      <description>FYI: If the buggy Glade v=3.38.2 is patched, the complicated manual process is not needed.
Client-side decoration with GtkHeaderbar using Glade Let&amp;rsquo;s consider to add client-side decorated GtkHeaderBar and to put primary menu with GtkPopover.
This may not be easy with Glade 3.38.2 on upcoming Debian Bullseye 11 since it is buggy. I created a note on my workaround at the end of this page
Let&amp;rsquo;s assume Glade is fixed by my patch or any other means and let&amp;rsquo;s use Glade to design GUI.</description>
    </item>
    
    <item>
      <title>GTK GUI with PyGObject (8)</title>
      <link>/en/2021/07/21/pygi-8/</link>
      <pubDate>Wed, 21 Jul 2021 00:00:00 +0900</pubDate>
      
      <guid>/en/2021/07/21/pygi-8/</guid>
      <description>Example: Multiline Text Editor with GtkSource.View Next exercise is to create a modal dialog window with Glade similar to Multiline Text Editor
Doing this with the Gtk.TextView widget is not so challenging. I decided to use GtkSource.View instead to gain access to capability of regex and case sensitivity.
I didn&amp;rsquo;t see GtkSource.View related widgets in the Glade&amp;rsquo;s available choice list, I first created Multiline Text Editor with Gtk.TextView just to get the general design done.</description>
    </item>
    
    <item>
      <title>GTK GUI with PyGObject (7)</title>
      <link>/en/2021/07/19/pygi-7/</link>
      <pubDate>Mon, 19 Jul 2021 00:00:05 +0900</pubDate>
      
      <guid>/en/2021/07/19/pygi-7/</guid>
      <description>Example: GtkIconView Let&amp;rsquo;s go through another notable widget GtkIconView.
Let&amp;rsquo;s create icon-view.py/icon-view.ui example. It took me a while to make these working since existing examples usually don&amp;rsquo;t use Glade nor Gtk.Template.
This is very much like GtkTreeView example.
icon-view.py: import gi gi.require_version(&amp;#34;Gtk&amp;#34;, &amp;#34;3.0&amp;#34;) from gi.repository import Gtk from gi.repository.GdkPixbuf import Pixbuf @Gtk.Template(filename=&amp;#34;icon-view.ui&amp;#34;) class SimpleWindow(Gtk.Window): # corresponding name in XML &amp;#39;class&amp;#39; attribute for this class __gtype_name__ = &amp;#34;icon-views&amp;#34; # corresponding name in XML &amp;#39;id&amp;#39; attribute sets this class member variable liststore1 = Gtk.</description>
    </item>
    
    <item>
      <title>GTK GUI with PyGObject (6)</title>
      <link>/en/2021/07/19/pygi-6/</link>
      <pubDate>Mon, 19 Jul 2021 00:00:00 +0900</pubDate>
      
      <guid>/en/2021/07/19/pygi-6/</guid>
      <description>GtkComboBox and GtkComboBoxText GtkComboBox under the &amp;ldquo;Control&amp;rdquo; button GtkComboBoxText under the &amp;ldquo;Cotrol&amp;rdquo; button A GtkComboBox is a widget that allows the user to choose from a list of valid choices offered in Gtk.TreeModel.
GtkComboBoxText is for the simpler text-only case of GtkComboBox.
For these let&amp;rsquo;s create combo-box.py/combo-box.ui and combo-box-text.py/combo-box-text.ui examples and compare them. It took me a while to make these working since existing examples usually don&amp;rsquo;t use Glade nor Gtk.</description>
    </item>
    
    <item>
      <title>GTK GUI with PyGObject (5)</title>
      <link>/en/2021/07/18/pygi-5/</link>
      <pubDate>Sun, 18 Jul 2021 00:00:00 +0000</pubDate>
      
      <guid>/en/2021/07/18/pygi-5/</guid>
      <description>GtkListBox and GtkFlowBox GtkListBox under the &amp;ldquo;Containers&amp;rdquo; button GtkFlowBox under the &amp;ldquo;Containers&amp;rdquo; button These are like Gtk.Box and Gtk.Grid but its contents can by dynamically sorted and filtered.
The children of these are Gtk.ListBoxRow and Gtk.FlowBoxChild respectively and these can be fairly complex. If the content of these are simple enough, use of Gtk.TreeView and Gtk.IconView may save your efforts.
GtkTreeView Although Gtk.TreeView was mentioned as a simpler tool to use than Gtk.</description>
    </item>
    
    <item>
      <title>GTK GUI with PyGObject (4)</title>
      <link>/en/2021/07/17/pygi-4/</link>
      <pubDate>Sat, 17 Jul 2021 00:00:00 +0000</pubDate>
      
      <guid>/en/2021/07/17/pygi-4/</guid>
      <description>GtkNotebook and GtkStack GtkNotebook under the &amp;ldquo;Containers&amp;rdquo; button GtkStack under the &amp;ldquo;Containers&amp;rdquo; button These are very similar displaying a selected page out of stacked pages.
For GtkNotebook, functionality to select page is automatically provided.
For GtkStack, functionality to select page needs external &amp;ldquo;control&amp;rdquo; widget and it needs to be specified in the property of the GtkStack widget. Such external &amp;ldquo;control&amp;rdquo; widget can be:
GtkStackSwitcher under the &amp;ldquo;Control&amp;rdquo; button (horizontal/vertical list) GtkStackSidebar under the &amp;ldquo;Control&amp;rdquo; button (vertical list) </description>
    </item>
    
    <item>
      <title>GTK GUI with PyGObject (3)</title>
      <link>/en/2021/07/16/pygi-3/</link>
      <pubDate>Fri, 16 Jul 2021 00:00:00 +0000</pubDate>
      
      <guid>/en/2021/07/16/pygi-3/</guid>
      <description>Example: Special button widgets into GUI To put more widgets,&amp;ldquo;Number of items&amp;rdquo; on the left panel of GtkBox was incremented. Some box are further subdivided again with GtkBox with their &amp;ldquo;Orientation&amp;rdquo; settings set to &amp;ldquo;Horizontal&amp;rdquo; instead.
Then I placed several additional simple &amp;ldquo;Control&amp;rdquo; widgets:
GtkSpinButton under the &amp;ldquo;Control&amp;rdquo; button GtkToggleButton under the &amp;ldquo;Control&amp;rdquo; button GtkCheckButton under the &amp;ldquo;Control&amp;rdquo; button GtkRadioButton under the &amp;ldquo;Control&amp;rdquo; button GtkFileChooserButton under the &amp;ldquo;Control&amp;rdquo; button Please note I created multiple widgets to learn how they work together with the object.</description>
    </item>
    
    <item>
      <title>GTK GUI with PyGObject (2)</title>
      <link>/en/2021/07/13/pygi-2/</link>
      <pubDate>Tue, 13 Jul 2021 00:00:00 +0000</pubDate>
      
      <guid>/en/2021/07/13/pygi-2/</guid>
      <description>Example: Static simple widgets into GUI Dividing area into smaller subdivided areas are mostly done by GtkBox or GtkGrid under the &amp;ldquo;Containers&amp;rdquo; button.
As a starter, I put GtkBox.
Then I placed 2 simple &amp;ldquo;Control&amp;rdquo; widgets and a simple GtkLabel &amp;ldquo;Display&amp;rdquo; widget as an easy starter:
GtkButton under the &amp;ldquo;Control&amp;rdquo; button GtkEntry under the &amp;ldquo;Control&amp;rdquo; button GtkLabel under the &amp;ldquo;Display&amp;rdquo; button I set IDs for these widgets basically by dropping &amp;ldquo;Gtk&amp;rdquo; from the GTk class names.</description>
    </item>
    
    <item>
      <title>GTK GUI with PyGObject (1)</title>
      <link>/en/2021/07/12/pygi-1/</link>
      <pubDate>Mon, 12 Jul 2021 00:00:00 +0000</pubDate>
      
      <guid>/en/2021/07/12/pygi-1/</guid>
      <description>Now that GTK4 is used in Debian/Bookworm in 2023, this section is getting outdated. The followings may be interesting to read:
https://github.com/Taiko2k/GTK4PythonTutorial https://amolenaar.github.io/pgi-docgen/#Gtk-4.0 My objective here is to learn efficient GUI programming with Glade and Python using Gtk.Builder class instead of calling widget classes directly and using decorators offered by Gtk.Templates.
I only touch on essential concepts in the order of practical importance and skip trivial points and points already addressed in The Python GTK+ 3 Tutorial.</description>
    </item>
    
    <item>
      <title>Development system (2)</title>
      <link>/en/2021/04/09/dev-02/</link>
      <pubDate>Fri, 09 Apr 2021 00:00:00 +0000</pubDate>
      
      <guid>/en/2021/04/09/dev-02/</guid>
      <description>See Personal DEB package repository for updated easier alternative method.
Local private package repo After reading https://wiki.debian.org/DebianRepository/Setup checking their popularity, I decided to go with reprepro package.
Here, I follow https://wiki.debian.org/DebianRepository/SetupWithReprepro (It was slightly outdated. I update it.)
Setting up an web server $ sudo apt install apache2 Now you can see a nice &amp;ldquo;Default Page&amp;rdquo; at &amp;ldquo;[::1]&amp;rdquo; (or &amp;ldquo;127.0.0.1&amp;rdquo; for IPV4) using browser.
Let&amp;rsquo;s create a simple directory tree for single distribution case.</description>
    </item>
    
    <item>
      <title>Development system (1)</title>
      <link>/en/2021/04/03/dev-01/</link>
      <pubDate>Sat, 03 Apr 2021 00:00:00 +0000</pubDate>
      
      <guid>/en/2021/04/03/dev-01/</guid>
      <description>Development infrastructure In order to keep development setups to be simple and robust, I changed development infrastructure.
For package test build, I decided to move to schroot. For package build, I decided to move to sbuild (a schroot wrapper). For package test for each GUI setups, I decided to set up KVM. (I was suffering sudden cowbuilder failures. That was another motivation.)
Planned infrastructure includes:
APT proxy on the host WS.</description>
    </item>
    
    <item>
      <title>Debian Workstation (usability) (old)</title>
      <link>/en/2021/01/15/debian-usability/</link>
      <pubDate>Fri, 15 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>/en/2021/01/15/debian-usability/</guid>
      <description>This is an outdated deprecated guide. Please read the updated guide.
Workstation usability Let me keep up note on configuring and administrating my workstation under post-Debian Bullseye (11) GNU/Linux in testing.
This is non-hardware specific notes and tips.
Installer installed extra packages After the initial installation, packages with Priority: values required, important and standard are installed. In addition to these packages, I see the installer installs following extra packages:
busybox console-setup discover grub-efi-amd64 initramfs-tools installation-report keyboard-configuration laptop-detect libcap2-bin linux-image-amd64 lsb-base popularity-contest shim-signed task-desktop task-english task-laptop tasksel usbutils Initial setup Running initial-setup script found at my repository should set up basics.</description>
    </item>
    
    <item>
      <title>ThinkPad T14 Gen 1 (AMD)</title>
      <link>/en/2021/01/07/thinkpad-t14-gen-1-amd/</link>
      <pubDate>Thu, 07 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>/en/2021/01/07/thinkpad-t14-gen-1-amd/</guid>
      <description>Let me keep up note on configuring and administrating my ThinkPad T14 Gen 1 (AMD) under Debian GNU/Linux. This is hardware specific tips.
My system has 2 NVMe SSDs:
AMD Ryzen™ 5 PRO 4650U &amp;ndash; 6 cores, 12 threads 32GB (PC4-25600 DDR4 SDRAM) &amp;ndash; after adding aftermarket Transcend 16GB SDRAM (JM3200HSE-16G [SODIMM DDR4 PC4-25600 16GB]) WDC PC SN520 SDAPMUW-128G-1001 (20370001) &amp;ndash; Original Western Digital 128GB SSD TS2TMTE220S (42B8T4EA) &amp;ndash; Aftermarket Transcend 2TB SSD Official Information Sources T14 Gen 1 (type 20UD, 20UE) Laptop (ThinkPad) Product Home Removal and Replacement Videos - ThinkPad T14 Gen 1 Forum Adding 2TB SSD (2280 both side) The original Western Digital 128GB PCIe SSD (2242, IC on top side only) is removed and moved with thermal pad to the unused PCIe slot intended for WAN card.</description>
    </item>
    
    <item>
      <title>dmesg for SATA</title>
      <link>/en/2020/04/29/dmesg-sata/</link>
      <pubDate>Wed, 29 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>/en/2020/04/29/dmesg-sata/</guid>
      <description>dmesg from SATA After having a loose SATA cable problem and fixed it, I happen to see dmesg as:
$ sudo dmesg ... [ 2.373152] sd 0:0:0:0: [sda] 937703088 512-byte logical blocks: (480 GB/447 GiB) [ 2.373156] sd 0:0:0:0: [sda] Write Protect is off [ 2.373158] sd 0:0:0:0: [sda] Mode Sense: 00 3a 00 00 [ 2.373165] sd 0:0:0:0: [sda] Write cache: enabled, read cache: enabled, doesn&amp;#39;t support DPO or FUA [ 2.</description>
    </item>
    
    <item>
      <title>Fish shell</title>
      <link>/en/2019/10/21/fish-shell-1/</link>
      <pubDate>Mon, 21 Oct 2019 00:00:00 +0000</pubDate>
      
      <guid>/en/2019/10/21/fish-shell-1/</guid>
      <description>NOTE (2021-01-07):
I gave up using fish early in 2000. I now stick to:
Bash for interactive shell activity. Dash for simple scripting. Python3 for non-trivial scripting. Original note:
Fish shell looks interesting to me since it makes handling of space in the filename a lot simpler and have simple but powerful string manipulation with PCRE2.
Fish shell Fish Documentation Fish Tutorial Fish Command reference Fisher Awesome fish Other resources differences from bash fish shellを使う fish shellで文字列操作 Debimate &amp;hellip; fishへ移行 fish shellのconfig.</description>
    </item>
    
    <item>
      <title>Re-learning Vim (2)</title>
      <link>/en/2019/09/24/vim-learn-2/</link>
      <pubDate>Tue, 24 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>/en/2019/09/24/vim-learn-2/</guid>
      <description>This page is here as my old memo and contents are outdated. See:
Re-learning Vim (1) Re-learning Vim (4) Let&amp;rsquo;s review how I initialize Vim and use a few interesting packages.
Please note that I now manage package directly via the Vim 8&amp;rsquo;s native package management framework with packadd! without using so-called package managers.
Vim general settings (packages) As of 2021-09-02, I mostly use the latest version from github for some fancy fast developing packages but also use older mature packages from Debian vim-scripts package.</description>
    </item>
    
    <item>
      <title>Wayland</title>
      <link>/en/2019/09/21/wayland/</link>
      <pubDate>Sat, 21 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>/en/2019/09/21/wayland/</guid>
      <description>Standard GNOME desktop under Debian Buster 10 has moved to use Wayland.
Although the migration from X to Wayland is mostly transparent to the end-user like me, there are some exceptions.
How to check if an application uses Wayland or X Execute &amp;ldquo;xeyes &amp;amp;&amp;rdquo; from a terminal console . Move mouse pointer over to an application in question. If eyes are responsive, it&amp;rsquo;s an X application. If eyes aren&amp;rsquo;t responsive, it&amp;rsquo;s a Wayland application.</description>
    </item>
    
    <item>
      <title>Re-learning Vim (1)</title>
      <link>/en/2019/09/17/vim-learn-1/</link>
      <pubDate>Tue, 17 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>/en/2019/09/17/vim-learn-1/</guid>
      <description>I could use Vim as a basic editor with TKL-keyboard while tapping some keys multiple times. This was functional but not so elegant!
I decided to re-learn Vim to use it properly. Here is my learning memo.
For simplicity, I may use ^F to mean CTRL-F.
This page has been updated in 2022 since some basic summary is valid and common to neovim. See Re-learning Vim (4) to get the latest situation.</description>
    </item>
    
    <item>
      <title>python3 formatting with black</title>
      <link>/en/2019/09/02/python3-black/</link>
      <pubDate>Mon, 02 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>/en/2019/09/02/python3-black/</guid>
      <description>I see formatting consistency provided by the black command helps me.
The black is available as Debian package and its upstream is at https://github.com/psf/black
Lint tools before black These are basic lint tools before black.
pycodestyle (formerly called pep8) flake8 (bundle of: pycodestyle + pyflakes). Install black $ sudo apt install python3-black Use black $ black a-python-code-directory/ or
$ black a-python-code-file.py Skip Lint prigram Line with #NOQA at the end are skipped by pycodestyle for PEP-8 lint.</description>
    </item>
    
    <item>
      <title>dgit workflow</title>
      <link>/en/2019/02/11/dgit-workfow01/</link>
      <pubDate>Mon, 11 Feb 2019 21:53:26 +0900</pubDate>
      
      <guid>/en/2019/02/11/dgit-workfow01/</guid>
      <description>For Debian maintainer, there can be 4 approaches for maintaining git repository with dgit. Let me get all key points of manpages.
tutorials model tool history patch quilt maintainer dgit-maint-native(7) native git(1) upstream git (same) N/A upstream dgit-maint-merge(7) merge git merge(1) upstream git applied merged upstream involved dgit-maint-debrebase(7) rebasish git-debrebase(1) upstream git applied series pure downstream dgit-maint-gbp(7) gbp git-buildpackage(1) upstream tar unapplied series pure downstream Here, the maintainer column indicates relationship of the maintainer to the upstream development.</description>
    </item>
    
    <item>
      <title>Initial setup for hugo (2)</title>
      <link>/en/2019/02/09/initial-setup02/</link>
      <pubDate>Sat, 09 Feb 2019 11:15:56 +0900</pubDate>
      
      <guid>/en/2019/02/09/initial-setup02/</guid>
      <description>Costomization wishlist Let&amp;rsquo;s customize web site contents.
I want to have 2 separate directories for English and Japanese contents. Main menu should have link to the list of contents dedicated for English and Japanese contents The list of contents needs to be customized. The following pages gave me good starting points.
https://www.jakewiesler.com/blog/hugo-directory-structure/ https://sourceforge.net/p/hugo-generator/wiki/markdown_syntax/ Customization example Here are what I did:
Since I don&amp;rsquo;t use content/_index.Rmarkdown, I erased it. In order to save typing, I renamed content/_index.</description>
    </item>
    
    <item>
      <title>Initial setup for hugo (1)</title>
      <link>/en/2019/02/09/initial-setup01/</link>
      <pubDate>Sat, 09 Feb 2019 11:00:56 +0900</pubDate>
      
      <guid>/en/2019/02/09/initial-setup01/</guid>
      <description>Initial hugo setups Let&amp;rsquo;s set up a local git repository for a simple personal web pages with blog support using hugo on Debian.
$ sudo apt-get install hugo $ cd /path/to # where you can write $ hugo new site &amp;lt;webbuildtree&amp;gt; Congratulations! Your new Hugo site is created in /path/to/osamuaoki. Just a few more steps and you&amp;#39;re ready to go: 1. Download a theme into the same-named folder. Choose a theme from https://themes.</description>
    </item>
    
    <item>
      <title>Fun to Program -- C Language</title>
      <link>/en/2013/08/28/fun2prog-clang/</link>
      <pubDate>Wed, 28 Aug 2013 00:00:58 +0900</pubDate>
      
      <guid>/en/2013/08/28/fun2prog-clang/</guid>
      <description>This was originally written and created around 2013 and may require to be updated. (2021)
C Language Except for some functional languages such as Scheme, many procedual languages share quite a bit of similarities. C language is a good start in terms of its gramatical simplicity.
Program control sequence keywords
C syntax meaning expression; simple expression statement {statement...} block statement if (expression) statement conditional execution if (expression) statement else statement conditional executions switch (expression) {case const-express: {statement.</description>
    </item>
    
    <item>
      <title>Fun to Program -- Language basics</title>
      <link>/en/2013/08/27/fun2prog-languages/</link>
      <pubDate>Tue, 27 Aug 2013 00:00:57 +0900</pubDate>
      
      <guid>/en/2013/08/27/fun2prog-languages/</guid>
      <description>This was originally written and created around 2013 and may require to be updated. (2021)
Language basics See Wikipedia article on programing language.
Please note this may be inaccurate.
statement ; as statement terminator: C, C++, Java, Vala, &amp;hellip; ; as statement separator: Perl, Pascal, PL/I, SQL, &amp;hellip; EOL as statement terminator: Python ; or EOL as statement terminator: Shell ; as NOP statement: Lua block statement { statement... } : C, C++, Java, Vala, Perl, Shell, Lua, &amp;hellip; BEGIN statement.</description>
    </item>
    
    <item>
      <title>Fun to Program -- Vim basics</title>
      <link>/en/2013/08/26/fun2prog-vim/</link>
      <pubDate>Mon, 26 Aug 2013 00:00:56 +0900</pubDate>
      
      <guid>/en/2013/08/26/fun2prog-vim/</guid>
      <description>This was originally written and created around 2013 and may require to be updated. (2021)
Vim basics Learning and practice!
vimtutor vim +help +only ~/.vimrc as:
set nocompatible set nopaste set pastetoggle=&amp;lt;f2&amp;gt; set syntax=ON &amp;#34; Use secure modeline plug-in set nomodeline if $USER == &amp;#34;root&amp;#34; set noswapfile else set swapfile endif &amp;#34; filler to avoid the line above being recognized as a modeline &amp;#34; filler &amp;#34; filler Learn additional basics:</description>
    </item>
    
    <item>
      <title>Fun to Program -- Utilities</title>
      <link>/en/2013/08/25/fun2prog-utilities/</link>
      <pubDate>Sun, 25 Aug 2013 00:00:55 +0900</pubDate>
      
      <guid>/en/2013/08/25/fun2prog-utilities/</guid>
      <description>This was originally written and created around 2013 and may require to be updated. (2021)
Utilities Here is a list of basic utilities used for the programming.
You can find usage examples for the commands in this document if their lines are ending with *.
POSIX shell (dash package) See Debain Reference GNU make (make package) See Debain Reference GNU C compiler (gcc package) * See the gccintro package containing &amp;ldquo;Introduction to GCC by Brian J.</description>
    </item>
    
    <item>
      <title>Fun to Program -- Coding style</title>
      <link>/en/2013/08/24/fun2prog-coding-style/</link>
      <pubDate>Sat, 24 Aug 2013 00:00:54 +0900</pubDate>
      
      <guid>/en/2013/08/24/fun2prog-coding-style/</guid>
      <description>This was originally written and created around 2013 and may require to be updated. (2021)
Coding style Follow the existing practice for the source.
Osamu&amp;rsquo;s preference at this moment is as follows:
For this document, 4 spaces as much as possible for any codes &amp;hellip; C and alike: normally Linux-style hardtab. (ts=8 noet) Python: 4 spaces (The official indentation rule for Python, ts=4 sts=4 et) Other scripts: also 4 spaces or hardtab.</description>
    </item>
    
    <item>
      <title>Fun to Program -- System Statistics</title>
      <link>/en/2013/08/23/fun2prog-sys-stat/</link>
      <pubDate>Fri, 23 Aug 2013 00:00:53 +0900</pubDate>
      
      <guid>/en/2013/08/23/fun2prog-sys-stat/</guid>
      <description>This was originally written and created around 2013 and may require to be updated. (2021)
System Statistics Executables Let&amp;rsquo;s check roughly what kind of executables are used on my typical GNOME desktop Debian system building this document.
Statistics over installed executable programs
Executable type Number of programs ELF executable (all) 2442 ELF executable (set*id) 37 ELF executable (linked to libc) 2350 ELF executable (linked to libstdc++ = C++) 361 ELF executable (linked to libX11 = X) 413 ELF executable (linked to gobject = GNOME) 329 ELF executable (linked to libQtCore = KDE) 101 ELF executable (linked to libncurses) 53 POSIX shell script 560 Perl script 508 Python script 240 Bash shell script 149 Ruby script 25 Lua script 1 ELF executable can be generated from any compiled languages such as C, C++, , Objective C, Objective C++, Vala, Common Lisp, Scheme, Haskel, Pascal, Fortran, Ada, &amp;hellip; but most likely they are from C or C++.</description>
    </item>
    
    <item>
      <title>Fun to Program -- Further readings</title>
      <link>/en/2013/08/22/fun2prog-readings/</link>
      <pubDate>Thu, 22 Aug 2013 00:00:52 +0900</pubDate>
      
      <guid>/en/2013/08/22/fun2prog-readings/</guid>
      <description>This was originally written and created around 2013 and may require to be updated. (2021)
Further readings Here are some documentation I found on the web which may be interesting to read. (I have not yet examined all their contents yet.)
IBM developerWorks IBM developerWorks Linux New to Linux programming and Linux system administration AIX and UNIX Technical library Speaking UNIX This tutorial series by Martin Streicher (martin.streicher@gmail.com) provide many examples of basic UNIX operations.</description>
    </item>
    
    <item>
      <title>Fun to Program -- GnuPG</title>
      <link>/en/2013/08/21/fun2prog-gnupg/</link>
      <pubDate>Wed, 21 Aug 2013 00:00:51 +0900</pubDate>
      
      <guid>/en/2013/08/21/fun2prog-gnupg/</guid>
      <description>This was originally written and created around 2013 and may require to be updated. (2021)
Shell code with GnuPG Here are code examples which I thought interesting.
Encrypted code Let&amp;rsquo;s make an obfuscated shell code by encrypting its real code contents. The following creates an encrypted ASCII file hello.asc (passphrase used was &amp;ldquo;secret&amp;rdquo;) from hello.
Encrypting hello shell script into hello.asc
$ cat ./hello #!/bin/sh # my first shell program echo &amp;#34;Hello, world!</description>
    </item>
    
    <item>
      <title>Fun to Program -- Embedded Lua</title>
      <link>/en/2013/08/20/fun2prog-lua/</link>
      <pubDate>Tue, 20 Aug 2013 00:00:50 +0900</pubDate>
      
      <guid>/en/2013/08/20/fun2prog-lua/</guid>
      <description>This was originally written and created around 2013 and may require to be updated. (2021)
Embedded Lua The Lua interpreter embedded into a small C program offers an ideal configuration system. It can execute any functions of the hosting C program under specified conditions and sequences with arbitrary parameter values.
Lua is small. Lua has simple procedural syntax. Lua has powerful data constructs based on associative arrays. Lua has extensible semantics.</description>
    </item>
    
    <item>
      <title>Fun to Program -- XML</title>
      <link>/en/2013/08/19/fun2prog-xml/</link>
      <pubDate>Mon, 19 Aug 2013 00:00:49 +0900</pubDate>
      
      <guid>/en/2013/08/19/fun2prog-xml/</guid>
      <description>This was originally written and created around 2013 and may require to be updated. (2021)
XML XML is a representation of the textual data structure. For example, it is used for web pages (XHTML) and DocBook source files (DocBook).
The tag pair &amp;ldquo;&amp;lt;tag&amp;gt; ... &amp;lt;/tag&amp;gt;&amp;rdquo; or selfclosing tag &amp;ldquo;&amp;lt;tag /&amp;gt;&amp;rdquo; are used to markup the text data. This simple XML data structure allows to create its generic data processing tools such as XSLT, DOM, SAX, &amp;hellip; .</description>
    </item>
    
    <item>
      <title>Fun to Program -- SQLite</title>
      <link>/en/2013/08/18/fun2prog-sqlite/</link>
      <pubDate>Sun, 18 Aug 2013 00:00:48 +0900</pubDate>
      
      <guid>/en/2013/08/18/fun2prog-sqlite/</guid>
      <description>This was originally written and created around 2013 and may require to be updated. (2021)
SQLite SQLite is a lightweight relational database management system suitable for embedding into the application program by linking the SQLite library. Structured Query Language (SQL) can be used to manage the content of the database.
SQL basics You can interactively input SQL commands to the command line after starting sqlite3 as:
$ sqlite3 test.db SQLite version 3.</description>
    </item>
    
    <item>
      <title>Fun to Program -- GTK&#43; GUI program</title>
      <link>/en/2013/08/17/fun2prog-gtkgui/</link>
      <pubDate>Sat, 17 Aug 2013 00:00:47 +0900</pubDate>
      
      <guid>/en/2013/08/17/fun2prog-gtkgui/</guid>
      <description>This was originally written and created around 2013 and may require to be updated. (2021)
GTK+ GUI programs Here are some pointers to example codes for GNOME GUI:
Beginner Gtk+ Course (August 20, 2012) GNOME Developer Platform Demos (These are mostly empty templates as of 2012.) Let me record my practice codes which create executables with the following same behaviour.
First it displays a small window as:
+----------------X | Click me!</description>
    </item>
    
    <item>
      <title>Fun to Program -- GNOME</title>
      <link>/en/2013/08/16/fun2prog-gnome/</link>
      <pubDate>Fri, 16 Aug 2013 00:00:40 +0900</pubDate>
      
      <guid>/en/2013/08/16/fun2prog-gnome/</guid>
      <description>This was originally written and created around 2013 and may require to be updated. (2021)
GNOME The choice of the best GUI program practice is not simple since there are many choices for GUI platforms, many outdated documentations, new features without updated tutorials, and future uncertainties.
Despite people had very negative reaction to the GNOME3 due to its new default user experience, I chose it as my GUI example platform for its fundamental internal technical merits.</description>
    </item>
    
    <item>
      <title>Fun to Program -- Build system</title>
      <link>/en/2013/08/15/fun2prog-build/</link>
      <pubDate>Thu, 15 Aug 2013 00:00:39 +0900</pubDate>
      
      <guid>/en/2013/08/15/fun2prog-build/</guid>
      <description>This was originally written and created around 2013 and may require to be updated. (2021)
Build system There are many cross-platform build systems:
Autotools for GNU, GNOME, generic C/C++/Vala/&amp;hellip; programs CMake for KDE programs, etc. Python distutils for some Python programs Install Python source distribution (as a user) Generate Python source distribution (as an upstream) Please note there are many programs which come with the plain GNU Make as the build system .</description>
    </item>
    
    <item>
      <title>Fun to Program -- Python program</title>
      <link>/en/2013/08/14/fun2prog-python/</link>
      <pubDate>Wed, 14 Aug 2013 00:00:38 +0900</pubDate>
      
      <guid>/en/2013/08/14/fun2prog-python/</guid>
      <description>This was originally written and created around 2013 and may require to be updated. (2021)
Python program Python is a vary http://en.wikipedia.org/wiki/High-level_programming_language[high-level programming language] which offers features to support OOP. It is very well documented in the Python documentation web site.
Python frees us from chores of the memory management required by C and allows us to focus on the problem solving. Python module system allows us to organize codes in multiple files nicely and let us divide and conqueror bugs efficiently.</description>
    </item>
    
    <item>
      <title>Fun to Program -- Debug: level 4</title>
      <link>/en/2013/08/13/fun2prog-debug-4/</link>
      <pubDate>Tue, 13 Aug 2013 00:00:37 +0900</pubDate>
      
      <guid>/en/2013/08/13/fun2prog-debug-4/</guid>
      <description>This was originally written and created around 2013 and may require to be updated. (2021)
Debug: level 4 Dynamically tracing program execution to understand the general behavior of the program is the major part of debugging.
There are several ways to trace programs interactively. The perf tool facilitate this without any modifications to the source.
perf The linux-tools-* package matching your running kernel provides the perf command on your system.</description>
    </item>
    
    <item>
      <title>Fun to Program -- Debug: level 3</title>
      <link>/en/2013/08/12/fun2prog-debug-3/</link>
      <pubDate>Mon, 12 Aug 2013 00:00:36 +0900</pubDate>
      
      <guid>/en/2013/08/12/fun2prog-debug-3/</guid>
      <description>This was originally written and created around 2013 and may require to be updated. (2021)
Debug: level 3 The GNU debugger (GDB) make you look into binary programs.
If you do not mind reading the code in the assembler, no source code is required.
The GDB works even better if the program is compiled with the -g option and the source code is kept in place on the same machine after the compilation with the -g option.</description>
    </item>
    
    <item>
      <title>Fun to Program -- Debug: level 2</title>
      <link>/en/2013/08/11/fun2prog-debug-2/</link>
      <pubDate>Sun, 11 Aug 2013 00:00:35 +0900</pubDate>
      
      <guid>/en/2013/08/11/fun2prog-debug-2/</guid>
      <description>This was originally written and created around 2013 and may require to be updated. (2021)
Debug: level 2 Tracing program execution to understand the general behavior of the program is the major part of debugging.
There are several ways to trace programs non-interactively without any modifications to the source.
strace This is very effective tools to investigate what a program does without reading its full source at the system calll level.</description>
    </item>
    
    <item>
      <title>Fun to Program -- Debug: level 1</title>
      <link>/en/2013/08/10/fun2prog-debug-1/</link>
      <pubDate>Sat, 10 Aug 2013 00:00:34 +0900</pubDate>
      
      <guid>/en/2013/08/10/fun2prog-debug-1/</guid>
      <description>This was originally written and created around 2013 and may require to be updated. (2021)
Debug: level 1 Debugging is the major part of programing.
If your code fails by an unknown cause, it is primitive but is often used technique to embed logging codes for key internal parameters. This logging must be disabled for the normal program execution.
TIP: Use the script(1) command to obtain a file copy of the console output.</description>
    </item>
    
    <item>
      <title>Fun to Program -- ELF</title>
      <link>/en/2013/08/09/fun2prog-elf/</link>
      <pubDate>Fri, 09 Aug 2013 00:00:33 +0900</pubDate>
      
      <guid>/en/2013/08/09/fun2prog-elf/</guid>
      <description>This was originally written and created around 2013 and may require to be updated. (2021)
ELF In this chapter, I will play with ELF files generated from the same hello.c program file as the one in the Hello World: C with the debug information to learn how it works.
See the following for the he ELF:
The wikipedia: ELF The man page elf(5). Linkers and Loaders (draft) for their mechanism.</description>
    </item>
    
    <item>
      <title>Fun to Program -- Library</title>
      <link>/en/2013/08/08/fun2prog-library/</link>
      <pubDate>Thu, 08 Aug 2013 00:00:32 +0900</pubDate>
      
      <guid>/en/2013/08/08/fun2prog-library/</guid>
      <description>This was originally written and created around 2013 and may require to be updated. (2021)
Library Static and dynamic libraries Compiling source while stopping at object file can be done with the -c option. You can bunch such object files into a single archive/object. This is called library.
static library: libfoo.a simple archive of object files (*.o) as &amp;ldquo;ar rcs libfoo.a *.o&amp;rdquo; *.a may be used just like bunch of *.</description>
    </item>
    
    <item>
      <title>Fun to Program -- GCC</title>
      <link>/en/2013/08/07/fun2prog-gcc/</link>
      <pubDate>Wed, 07 Aug 2013 00:00:31 +0900</pubDate>
      
      <guid>/en/2013/08/07/fun2prog-gcc/</guid>
      <description>This was originally written and created around 2013 and may require to be updated. (2021)
GCC The gccintro package provides a good tutorial &amp;ldquo;Introduction to GCC by Brian J. Gough&amp;rdquo; for the GCC basics to compile C programs.
GCC version Check gcc version and defaults:
$ gcc -v Using built-in specs. COLLECT_GCC=gcc COLLECT_LTO_WRAPPER=/usr/lib/gcc/x86_64-linux-gnu/4.8/lto-wrapper Target: x86_64-linux-gnu Configured with: ../src/configure -v --with-pkgversion=&amp;#39;Debian 4.8.1-9&amp;#39; --with-bu... Thread model: posix gcc version 4.8.1 (Debian 4.</description>
    </item>
    
    <item>
      <title>Fun to Program -- Process</title>
      <link>/en/2013/08/06/fun2prog-process/</link>
      <pubDate>Tue, 06 Aug 2013 00:00:30 +0900</pubDate>
      
      <guid>/en/2013/08/06/fun2prog-process/</guid>
      <description>This was originally written and created around 2013 and may require to be updated. (2021)
Process Here are some practice results to play with process and inter process communication (IPC) (signal and network socket) on Debian wheezy.
Signal Signal is explained in signal(7).
Here are default actions for notable signals.
Default action is to terminate the process. SIGHUP = 1 : Death of controlling process SIGINT = 2 : Interrupt from keyboard (Ctrl-C) SIGKILL = 9 : Kill signal (non-trappable) SIGALRM = 14 : Timer signal from alarm(2) SIGTERM = 15 : Termination signal (default for kill) SIGUSR1 = 10 : User-defined signal 1 SIGUSR2 = 12 : User-defined signal 2 Default action is to terminate the process and dump core.</description>
    </item>
    
    <item>
      <title>Fun to Program -- Prime numbers</title>
      <link>/en/2013/08/05/fun2prog-prime/</link>
      <pubDate>Mon, 05 Aug 2013 00:00:29 +0900</pubDate>
      
      <guid>/en/2013/08/05/fun2prog-prime/</guid>
      <description>This was originally written and created around 2013 and may require to be updated. (2021)
Prime numbers A prime number (or a prime) is a natural number greater than 1 that has no positive divisors other than 1 and itself.
Let&amp;rsquo;s check simple code snippets to obtain prime numbers via the same trial division algorithm implemented in different languages to study the following:
basic for-loop syntax relative execution speed Please note this algorithm to obtain prime numbers is not the best one.</description>
    </item>
    
    <item>
      <title>Fun to Program -- Fibonacci numbers</title>
      <link>/en/2013/08/04/fun2prog-fibo/</link>
      <pubDate>Sun, 04 Aug 2013 00:00:28 +0900</pubDate>
      
      <guid>/en/2013/08/04/fun2prog-fibo/</guid>
      <description>This was originally written and created around 2013 and may require to be updated. (2021)
Fibonacci numbers The Fibonacci numbers are a sequence of integers, starting with 0, 1 and continuing 1, 2, 3, 5, 8, 13, &amp;hellip;, each new number being the sum of the previous two.
Let&amp;rsquo;s check simple code snippets to obtain Fibonacci numbers implemented in different languages to study the following:
basic while-loop syntax integer overflow behavior Shell Before we start, let&amp;rsquo;s check the integer overflow behavior of the shell on the 64-bit GNU/Linux platform.</description>
    </item>
    
    <item>
      <title>Fun to Program -- CLI programs</title>
      <link>/en/2013/08/03/fun2prog-cli/</link>
      <pubDate>Sat, 03 Aug 2013 00:00:27 +0900</pubDate>
      
      <guid>/en/2013/08/03/fun2prog-cli/</guid>
      <description>This was originally written and created around 2013 and may require to be updated. (2021)
CLI programs The command line interface (CLI) program requires to parse its command line arguments. Here are simple example code snippets.
Please note I chose the coding style which is the most legible for each language. I know there are other ways &amp;hellip;
Shell Shell script (short option only) Shell program with short command line options.</description>
    </item>
    
    <item>
      <title>Fun to Program -- Hello World!</title>
      <link>/en/2013/08/02/fun2prog-hello/</link>
      <pubDate>Fri, 02 Aug 2013 00:00:26 +0900</pubDate>
      
      <guid>/en/2013/08/02/fun2prog-hello/</guid>
      <description>This was originally written and created around 2013 and may require to be updated. (2021)
&amp;ldquo;Hello World!&amp;rdquo; Here are example code snippets to print &amp;ldquo;Hello World!&amp;rdquo; and somethings we should be aware of for each language.
Shell The most basic programing language: Shell.
Interpreter (slow) Easy to write a small program. Not easy to write a big program. Test code snippet under the normal console (or by &amp;ldquo;sh -i&amp;rdquo;). Source code for the hello shell script</description>
    </item>
    
    <item>
      <title>Fun to Program -- Opening</title>
      <link>/en/2013/08/01/fun2prog-open/</link>
      <pubDate>Thu, 01 Aug 2013 00:00:24 +0900</pubDate>
      
      <guid>/en/2013/08/01/fun2prog-open/</guid>
      <description>This was originally written and created around 2013 and may require to be updated. (2021)
This &amp;ldquo;Fun to Program&amp;rdquo; was originally created around 2013 when I was learning programming on Debian system and was published to http://people.debian.org/~osamu/fun2prog.html .
Since this has been neglected and I thought it is good idea to go through this content again. I moved this content to the currently maintained site https://osamuaoki.github.io/ in 2021.
Script examples were created in 2013.</description>
    </item>
    
  </channel>
</rss>
