<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>english on Goofing Osamu</title>
    <link>/categories/english/</link>
    <description>Recent content in english on Goofing Osamu</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 29 Apr 2020 00:00:00 +0000</lastBuildDate><atom:link href="/categories/english/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>dmesg for SATA</title>
      <link>/en/2020/04/29/dmesg-sata/</link>
      <pubDate>Wed, 29 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>/en/2020/04/29/dmesg-sata/</guid>
      <description>After having a loose SATA cable problem and fixed it, I happen to see dmesg as:
$ sudo dmesg ... [ 2.373152] sd 0:0:0:0: [sda] 937703088 512-byte logical blocks: (480 GB/447 GiB) [ 2.373156] sd 0:0:0:0: [sda] Write Protect is off [ 2.373158] sd 0:0:0:0: [sda] Mode Sense: 00 3a 00 00 [ 2.373165] sd 0:0:0:0: [sda] Write cache: enabled, read cache: enabled, doesn&#39;t support DPO or FUA [ 2.373173] sd 2:0:0:0: [sdb] 468862128 512-byte logical blocks: (240 GB/224 GiB) [ 2.</description>
    </item>
    
    <item>
      <title>Fish shell</title>
      <link>/en/2019/10/21/fish-shell-1/</link>
      <pubDate>Mon, 21 Oct 2019 00:00:00 +0000</pubDate>
      
      <guid>/en/2019/10/21/fish-shell-1/</guid>
      <description>NOTE (2021-01-07):
I gave up using fish early in 2000. I now stick to:
 Bash for interactive shell activity. Dash for simple scripting. Python3 for non-trivial scripting.  Original note:
Fish shell looks interesting to me since it makes handling of space in the filename a lot simpler and have simple but powerful string manipulation with PCRE2.
 Fish shell  Fish Documentation Fish Tutorial Fish Command reference   Fisher  Awesome fish   Other resources  differences from bash fish shellを使う fish shellで文字列操作 Debimate &amp;hellip; fishへ移行 fish shellのconfig.</description>
    </item>
    
    <item>
      <title>Re-learning Vim (2)</title>
      <link>/en/2019/09/24/vim-learn-2/</link>
      <pubDate>Tue, 24 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>/en/2019/09/24/vim-learn-2/</guid>
      <description>Let&amp;rsquo;s review a few interesting plugins.
Please note that I manage plugins via GUI reconfiguration framework using the vimconf command. See osamuaoki/dot-vim. I admit my scheme is not the main stream one.
Please note very basic configuration is at ~/.vim/vimrc.
All other initialization code is provided as plugin.
osamuaoki/00-vimrc My kitchen sink initialization script.
Let&amp;rsquo;s list its highlights.
Map &amp;lt;F2&amp;gt; to toggle PASTE MODE in INSERT MODE Adjust PASTE MODE by F2-key.</description>
    </item>
    
    <item>
      <title>Wayland</title>
      <link>/en/2019/09/21/wayland/</link>
      <pubDate>Sat, 21 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>/en/2019/09/21/wayland/</guid>
      <description>Although the migration from X to wayland is mostly transparent to the end-user like me, there are some exceptions.
How to check if an application uses wayland or X  Execute &amp;ldquo;xeyes &amp;amp;&amp;rdquo; from a terminal console . Move mouse pointer over to an application in question. If eyes are responsive, it&amp;rsquo;s an X application. If eyes aren&amp;rsquo;t responsive, it&amp;rsquo;s a wayland application.  You need to have x11-apps package installed.</description>
    </item>
    
    <item>
      <title>Re-learning Vim (1)</title>
      <link>/en/2019/09/17/vim-learn-1/</link>
      <pubDate>Tue, 17 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>/en/2019/09/17/vim-learn-1/</guid>
      <description>I could use Vim as a basic editor with TKL-keyboard while tapping some keys multiple times. This was functional but not so elegant!
I decided to re-learn Vim to use it properly. Here is my learning memo.
For simplicity, I use ^F to mean CTRL-F.
Concept  Use default vim (minimum configuration, if possible).  Use as much native functionalities. Don&amp;rsquo;t force Vim to behave like another program.   50%/60%-keyboard ready.</description>
    </item>
    
    <item>
      <title>python3 formatting with black</title>
      <link>/en/2019/09/02/python3-black/</link>
      <pubDate>Mon, 02 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>/en/2019/09/02/python3-black/</guid>
      <description>I see formatting consistency provided by the black command helps me.
The black is available as Debian package and its upstream is at https://github.com/psf/black
Lint tools before black These are basic lint tools before black.
 pycodestyle (formerly called pep8) flake8 (bundle of: pycodestyle + pyflakes).  Install black  $ sudo apt install python3-black Use black  $ black a-python-code-directory/ or
 $ black a-python-code-file.py Skip Lint prigram Line with #NOQA at the end are skipped by pycodestyle for PEP-8 lint.</description>
    </item>
    
    <item>
      <title>dgit workflow</title>
      <link>/en/2019/02/11/dgit-workfow01/</link>
      <pubDate>Mon, 11 Feb 2019 21:53:26 +0900</pubDate>
      
      <guid>/en/2019/02/11/dgit-workfow01/</guid>
      <description>For Debian maintainer, there can be 4 approaches for maintaining git repository with dgit. Let me get all key points of manpages.
   tutorials model tool history patch quilt maintainer     dgit-maint-native(7) native git(1) upstream git (same) N/A upstream   dgit-maint-merge(7) merge git merge(1) upstream git applied merged upstream   dgit-maint-debrebase(7) rebasish git-debrebase(1) upstream git applied series downstream   dgit-maint-gbp(7) gbp git-buildpackage(1) upstream tar unapplied series downstream    Here, the maintainer column indicates relationship of the maintainer to the upstream development.</description>
    </item>
    
    <item>
      <title>Initial setup for hugo (2)</title>
      <link>/en/2019/02/09/initial-setup02/</link>
      <pubDate>Sat, 09 Feb 2019 11:15:56 +0900</pubDate>
      
      <guid>/en/2019/02/09/initial-setup02/</guid>
      <description>Let&amp;rsquo;s customize web site contents.
 I want to have 2 separate directories for English and Japanese contents. Main menu should have link to the list of contents dedicated for English and Japanese contents The list of contents needs to be customized.  The following pages gave me good starting points.
 https://www.jakewiesler.com/blog/hugo-directory-structure/ https://sourceforge.net/p/hugo-generator/wiki/markdown_syntax/  Customization Here are what I did:
 Since I don&amp;rsquo;t use content/_index.Rmarkdown, I erased it. In order to save typing, I renamed content/_index.</description>
    </item>
    
    <item>
      <title>Initial setup for hugo (1)</title>
      <link>/en/2019/02/09/initial-setup01/</link>
      <pubDate>Sat, 09 Feb 2019 11:00:56 +0900</pubDate>
      
      <guid>/en/2019/02/09/initial-setup01/</guid>
      <description>Let&amp;rsquo;s set up a local git repository for a simple personal web pages with blog support using hugo on Debian.
 $ sudo apt-get install hugo $ cd /path/to # where you can write $ hugo new site &amp;lt;webbuildtree&amp;gt; Congratulations! Your new Hugo site is created in /path/to/osamuaoki. Just a few more steps and you&#39;re ready to go: 1. Download a theme into the same-named folder. Choose a theme from https://themes.</description>
    </item>
    
  </channel>
</rss>
