<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>english on Goofing Osamu</title>
    <link>/categories/english/</link>
    <description>Recent content in english on Goofing Osamu</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 19 Jul 2021 00:00:00 +0900</lastBuildDate><atom:link href="/categories/english/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>GTK GUI with PyGObject (5)</title>
      <link>/en/2021/07/19/pygi-5/</link>
      <pubDate>Mon, 19 Jul 2021 00:00:00 +0900</pubDate>
      
      <guid>/en/2021/07/19/pygi-5/</guid>
      <description>GtkComboBox and GtkComboBoxText  GtkComboBox under the &amp;ldquo;Control&amp;rdquo; button GtkComboBoxText under the &amp;ldquo;Cotrol&amp;rdquo; button  A GtkComboBox is a widget that allows the user to choose from a list of valid choices offered in Gtk.TreeModel.
GtkComboBoxText is for the simpler text-only case of GtkComboBox.
For these let&amp;rsquo;s create combo-box.py/combo-box.ui and combo-box-text.py/combo-box-text.ui examples and compare them. It took me a while to make these working since existing examples usually don&amp;rsquo;t use Glade nor Gtk.</description>
    </item>
    
    <item>
      <title>GTK GUI with PyGObject (4)</title>
      <link>/en/2021/07/18/pygi-4/</link>
      <pubDate>Sun, 18 Jul 2021 00:00:00 +0000</pubDate>
      
      <guid>/en/2021/07/18/pygi-4/</guid>
      <description>GUI workflow Let&amp;rsquo;s recap how GUI program are written here.
 Design static GUI components with Glade  Set the &amp;ldquo;composite&amp;rdquo; checkbox for the ID of the top GUI widget to make it &amp;ldquo;Class name&amp;rdquo;   Using Python with GObject Introspection to access GTK and associated libraries to program dynamic GUI components  Use Gtk.Template.Child() to create variables matching IDs to access widgets.    GtkNotebook and GtkStack Let&amp;rsquo;s go through more notable widgets again.</description>
    </item>
    
    <item>
      <title>GTK GUI with PyGObject (3)</title>
      <link>/en/2021/07/17/pygi-3/</link>
      <pubDate>Sat, 17 Jul 2021 00:00:00 +0000</pubDate>
      
      <guid>/en/2021/07/17/pygi-3/</guid>
      <description>How to fill widgets into header of GUI Let&amp;rsquo;s get back to the simple1.py/simple1.ui example and change it to make a simple3.py/simple3.ui example by adding following widgets to the header bar.
 GtkLabel under the &amp;ldquo;Display&amp;rdquo; button GtkFileChooserButton under the &amp;ldquo;Control&amp;rdquo; button GtkButton under the &amp;ldquo;Control&amp;rdquo; button  For this simple3.py/simple3.ui example, let&amp;rsquo;s rename IDs in the XML file to the lowercase and rename class name as s/1/3/g. This is much more efficient if you use the text editor instead of clicking through Glade.</description>
    </item>
    
    <item>
      <title>GTK GUI with PyGObject (2)</title>
      <link>/en/2021/07/16/pygi-2/</link>
      <pubDate>Fri, 16 Jul 2021 00:00:00 +0000</pubDate>
      
      <guid>/en/2021/07/16/pygi-2/</guid>
      <description>How to fill more control widgets into GUI To put more widgets,&amp;ldquo;Number of items&amp;rdquo; on the left panel of GtkBox was incremented. Some box are further subdivided again with GtkBox with their &amp;ldquo;Orientation&amp;rdquo; settings set to &amp;ldquo;Horizontal&amp;rdquo; instead.
Then I placed several additional simple &amp;ldquo;Control&amp;rdquo; widgets:
 GtkSpinButton under the &amp;ldquo;Control&amp;rdquo; button GtkToggleButton under the &amp;ldquo;Control&amp;rdquo; button GtkCheckButton under the &amp;ldquo;Control&amp;rdquo; button GtkRadioButton under the &amp;ldquo;Control&amp;rdquo; button GtkFileChooserButton under the &amp;ldquo;Control&amp;rdquo; button  Please note I created multiple widgets to learn how they work together with the object.</description>
    </item>
    
    <item>
      <title>GTK GUI with PyGObject (1)</title>
      <link>/en/2021/07/12/pygi-1/</link>
      <pubDate>Mon, 12 Jul 2021 00:00:00 +0000</pubDate>
      
      <guid>/en/2021/07/12/pygi-1/</guid>
      <description>My objective here is to establish efficient GUI programming example with Glade and Python using Gtk.Builder class instead of calling widget classes directly.
I only touch on essential concepts in the order of practical importance and skip trivial points and points already addressed in The Python GTK+ 3 Tutorial.
GTK GUI situation GTK3 GUI has been changing. (version 3.38.5, 2021-07, Debian Bullseye)
The Python GTK+ 3 Tutorial (as of 2021-07) goes as:</description>
    </item>
    
    <item>
      <title>Development system (2)</title>
      <link>/en/2021/04/09/dev-02/</link>
      <pubDate>Fri, 09 Apr 2021 00:00:00 +0000</pubDate>
      
      <guid>/en/2021/04/09/dev-02/</guid>
      <description>Local repo After reading https://wiki.debian.org/DebianRepository/Setup checking their popularity, I decided to go with reprepro package.
Here, I follow https://wiki.debian.org/DebianRepository/SetupWithReprepro (It was slightly outdated. I update it.)
Setting up an web server  $ sudo apt install apache2 Now you can see a nice &amp;ldquo;Default Page&amp;rdquo; at &amp;ldquo;[::1]&amp;rdquo; (or &amp;ldquo;127.0.0.1&amp;rdquo; for IPV4) using browser.
Let&amp;rsquo;s create a simple directory tree for single distribution case.
 $ sudo bash -i # mkdir -p /var/www/html/repo # cat &amp;gt; /etc/apache2/conf-available/repos.</description>
    </item>
    
    <item>
      <title>Development system (1)</title>
      <link>/en/2021/04/03/dev-01/</link>
      <pubDate>Sat, 03 Apr 2021 00:00:00 +0000</pubDate>
      
      <guid>/en/2021/04/03/dev-01/</guid>
      <description>Development infrastructure In order to keep development setups to be simple and robust, I changed development infrastructure.
 For package test build, I decided to move to schroot. For package build, I decided to move to sbuild (a schroot wrapper). For package test for each GUI setups, I decided to set up KVM.  (I was suffering sudden cowbuilder failures. That was another motivation.)
Planned infrastructure includes:
 APT proxy on the host WS.</description>
    </item>
    
    <item>
      <title>Usability tips: Debian GNOME Workstation</title>
      <link>/en/2021/01/15/debian-buster-10-usability/</link>
      <pubDate>Fri, 15 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>/en/2021/01/15/debian-buster-10-usability/</guid>
      <description>Workstation usability Let me keep up note on configuring and administrating my workstation under Debian Buster (10) GNU/Linux. This is non-hardware specific tips.
EFI-based firmware updates Install gnome-firmware package and invoke GUI to update firmware on devices supported by fwupd using Linux Vendor Firmware Service.
Thinkpad EFI firmware and SSD firmware were updated.
GUI Desktop customization Install gnome-tweak package to the system and tweaked to add &amp;ldquo;Applications&amp;rdquo; to top bar etc.</description>
    </item>
    
    <item>
      <title>Hardware tips: ThinkPad T14 Gen 1 (AMD)</title>
      <link>/en/2021/01/07/thinkpad-t14-gen-1-amd/</link>
      <pubDate>Thu, 07 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>/en/2021/01/07/thinkpad-t14-gen-1-amd/</guid>
      <description>Let me keep up note on configuring and administrating my ThinkPad T14 Gen 1 (AMD) under Debian GNU/Linux. This is hardware specific tips.
My system has 2 NVMe SSDs:
 AMD Ryzen™ 5 PRO 4650U &amp;ndash; 6 cores, 12 threads 32GB (PC4-25600 DDR4 SDRAM) &amp;ndash; after adding aftermarket 16GB SDRAM WDC PC SN520 SDAPMUW-128G-1001 (20370001) &amp;ndash; Original Western Digital 128GB SSD TS2TMTE220S (42B8T4EA) &amp;ndash; Aftermarket Transcend 2TB SSD  Official Information Sources  T14 Gen 1 (type 20UD, 20UE) Laptop (ThinkPad) Product Home Removal and Replacement Videos - ThinkPad T14 Gen 1 Forum  Adding 2TB SSD (2280 both side) The original Western Digital 128GB PCIe SSD (2242, IC on top side only) is removed and moved with thermal pad to the unused PCIe slot intended for WAN card.</description>
    </item>
    
    <item>
      <title>dmesg for SATA</title>
      <link>/en/2020/04/29/dmesg-sata/</link>
      <pubDate>Wed, 29 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>/en/2020/04/29/dmesg-sata/</guid>
      <description>After having a loose SATA cable problem and fixed it, I happen to see dmesg as:
$ sudo dmesg ... [ 2.373152] sd 0:0:0:0: [sda] 937703088 512-byte logical blocks: (480 GB/447 GiB) [ 2.373156] sd 0:0:0:0: [sda] Write Protect is off [ 2.373158] sd 0:0:0:0: [sda] Mode Sense: 00 3a 00 00 [ 2.373165] sd 0:0:0:0: [sda] Write cache: enabled, read cache: enabled, doesn&#39;t support DPO or FUA [ 2.373173] sd 2:0:0:0: [sdb] 468862128 512-byte logical blocks: (240 GB/224 GiB) [ 2.</description>
    </item>
    
    <item>
      <title>Fish shell</title>
      <link>/en/2019/10/21/fish-shell-1/</link>
      <pubDate>Mon, 21 Oct 2019 00:00:00 +0000</pubDate>
      
      <guid>/en/2019/10/21/fish-shell-1/</guid>
      <description>NOTE (2021-01-07):
I gave up using fish early in 2000. I now stick to:
 Bash for interactive shell activity. Dash for simple scripting. Python3 for non-trivial scripting.  Original note:
Fish shell looks interesting to me since it makes handling of space in the filename a lot simpler and have simple but powerful string manipulation with PCRE2.
 Fish shell  Fish Documentation Fish Tutorial Fish Command reference   Fisher  Awesome fish   Other resources  differences from bash fish shellを使う fish shellで文字列操作 Debimate &amp;hellip; fishへ移行 fish shellのconfig.</description>
    </item>
    
    <item>
      <title>Re-learning Vim (2)</title>
      <link>/en/2019/09/24/vim-learn-2/</link>
      <pubDate>Tue, 24 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>/en/2019/09/24/vim-learn-2/</guid>
      <description>Let&amp;rsquo;s review a few interesting plugins.
Please note that I manage plugins via GUI reconfiguration framework using the vimconf command. See osamuaoki/dot-vim. I admit my scheme is not the main stream one.
As of 2021-04-01, I enabled:
 00-vimrc ale vim-airline vim-airline-themes (automatic) vim-better-whitespace vim-indent-guides vim-spell-under  (vim-gitgutter is interesting but I don&amp;rsquo;t work on repo with many contributors.)
Please note very basic configuration is at ~/.vim/vimrc.
All other initialization code is provided as plugin.</description>
    </item>
    
    <item>
      <title>Wayland</title>
      <link>/en/2019/09/21/wayland/</link>
      <pubDate>Sat, 21 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>/en/2019/09/21/wayland/</guid>
      <description>Standard GNOME desktop under Debian Buster 10 has moved to use Wayland.
Although the migration from X to Wayland is mostly transparent to the end-user like me, there are some exceptions.
How to check if an application uses Wayland or X  Execute &amp;ldquo;xeyes &amp;amp;&amp;rdquo; from a terminal console . Move mouse pointer over to an application in question. If eyes are responsive, it&amp;rsquo;s an X application. If eyes aren&amp;rsquo;t responsive, it&amp;rsquo;s a Wayland application.</description>
    </item>
    
    <item>
      <title>Re-learning Vim (1)</title>
      <link>/en/2019/09/17/vim-learn-1/</link>
      <pubDate>Tue, 17 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>/en/2019/09/17/vim-learn-1/</guid>
      <description>I could use Vim as a basic editor with TKL-keyboard while tapping some keys multiple times. This was functional but not so elegant!
I decided to re-learn Vim to use it properly. Here is my learning memo.
For simplicity, I use ^F to mean CTRL-F.
Concept  Use default vim (minimum configuration, if possible).  Use as much native functionalities. Don&amp;rsquo;t force Vim to behave like another program.   50%/60%-keyboard ready.</description>
    </item>
    
    <item>
      <title>python3 formatting with black</title>
      <link>/en/2019/09/02/python3-black/</link>
      <pubDate>Mon, 02 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>/en/2019/09/02/python3-black/</guid>
      <description>I see formatting consistency provided by the black command helps me.
The black is available as Debian package and its upstream is at https://github.com/psf/black
Lint tools before black These are basic lint tools before black.
 pycodestyle (formerly called pep8) flake8 (bundle of: pycodestyle + pyflakes).  Install black  $ sudo apt install python3-black Use black  $ black a-python-code-directory/ or
 $ black a-python-code-file.py Skip Lint prigram Line with #NOQA at the end are skipped by pycodestyle for PEP-8 lint.</description>
    </item>
    
    <item>
      <title>dgit workflow</title>
      <link>/en/2019/02/11/dgit-workfow01/</link>
      <pubDate>Mon, 11 Feb 2019 21:53:26 +0900</pubDate>
      
      <guid>/en/2019/02/11/dgit-workfow01/</guid>
      <description>For Debian maintainer, there can be 4 approaches for maintaining git repository with dgit. Let me get all key points of manpages.
   tutorials model tool history patch quilt maintainer     dgit-maint-native(7) native git(1) upstream git (same) N/A upstream   dgit-maint-merge(7) merge git merge(1) upstream git applied merged upstream involved   dgit-maint-debrebase(7) rebasish git-debrebase(1) upstream git applied series pure downstream   dgit-maint-gbp(7) gbp git-buildpackage(1) upstream tar unapplied series pure downstream    Here, the maintainer column indicates relationship of the maintainer to the upstream development.</description>
    </item>
    
    <item>
      <title>Initial setup for hugo (2)</title>
      <link>/en/2019/02/09/initial-setup02/</link>
      <pubDate>Sat, 09 Feb 2019 11:15:56 +0900</pubDate>
      
      <guid>/en/2019/02/09/initial-setup02/</guid>
      <description>Let&amp;rsquo;s customize web site contents.
 I want to have 2 separate directories for English and Japanese contents. Main menu should have link to the list of contents dedicated for English and Japanese contents The list of contents needs to be customized.  The following pages gave me good starting points.
 https://www.jakewiesler.com/blog/hugo-directory-structure/ https://sourceforge.net/p/hugo-generator/wiki/markdown_syntax/  Customization Here are what I did:
 Since I don&amp;rsquo;t use content/_index.Rmarkdown, I erased it. In order to save typing, I renamed content/_index.</description>
    </item>
    
    <item>
      <title>Initial setup for hugo (1)</title>
      <link>/en/2019/02/09/initial-setup01/</link>
      <pubDate>Sat, 09 Feb 2019 11:00:56 +0900</pubDate>
      
      <guid>/en/2019/02/09/initial-setup01/</guid>
      <description>Let&amp;rsquo;s set up a local git repository for a simple personal web pages with blog support using hugo on Debian.
 $ sudo apt-get install hugo $ cd /path/to # where you can write $ hugo new site &amp;lt;webbuildtree&amp;gt; Congratulations! Your new Hugo site is created in /path/to/osamuaoki. Just a few more steps and you&#39;re ready to go: 1. Download a theme into the same-named folder. Choose a theme from https://themes.</description>
    </item>
    
  </channel>
</rss>
